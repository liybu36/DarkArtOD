////////////////////////////////////////////////////////////////////////
// Class:       WF2TH1
// Module Type: analyzer
// File:        WF2TH1_module.cc
//
// Generated at Tue Mar 31 01:19:34 2015 by Alden Fan using artmod
// from cetpkgsupport v1_08_04.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "cetlib/exception.h"

#include "darkart/Products/Waveform.hh"

#include "TH1F.h"
#include "TCanvas.h"
#include "TFile.h"
#include "TDirectory.h"

#include <iostream>
#include <iomanip>
#include <sstream>
#include <cmath>

namespace darkart {
  class WF2TH1;
}

////////////////////////////////////////////////////////////////////////////
// Module to convert raw waveforms into TH1Fs and save them to ROOT file. //
// Use only sum channel. Down-sample to 32 ns samples.                    //
////////////////////////////////////////////////////////////////////////////


class darkart::WF2TH1 : public art::EDAnalyzer {
public:
  explicit WF2TH1(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  WF2TH1(WF2TH1 const &) = delete;
  WF2TH1(WF2TH1 &&) = delete;
  WF2TH1 & operator = (WF2TH1 const &) = delete;
  WF2TH1 & operator = (WF2TH1 &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;


private:

  art::ServiceHandle<art::TFileService> _tfs;

  art::InputTag _sumch_wfm_tag;

  int _wfm_bin_size;

  double _rebin_min;
  double _rebin_max;
};


darkart::WF2TH1::WF2TH1(fhicl::ParameterSet const & p)
  : EDAnalyzer(p)
  , _tfs()
  , _sumch_wfm_tag(p.get<std::string>("sumch_wfm_tag"))
  , _wfm_bin_size(p.get<int>("wfm_bin_size"))
  , _rebin_min(p.get<double>("rebin_min"))
  , _rebin_max(p.get<double>("rebin_max"))
{}

void darkart::WF2TH1::analyze(art::Event const & e)
{
  // Retrieve sum channel waveform
  auto const& sumchWfmVec = e.getValidHandle<darkart::WaveformVec>(_sumch_wfm_tag);
  darkart::Waveform const& sumchWfm = sumchWfmVec->front();
  std::vector<double> const& wfm = sumchWfm.wave;

  // calculate start and end of region to build histogram
  const int wfm_start_samp = sumchWfm.TimeToSample(_rebin_min,true);
  const int wfm_end_samp   = sumchWfm.TimeToSample(_rebin_max,true);
  const int n_bins = (wfm_end_samp - wfm_start_samp)/_wfm_bin_size;

  const double wfm_start = sumchWfm.SampleToTime(wfm_start_samp);
  const double wfm_end   = sumchWfm.SampleToTime(wfm_end_samp);

  
  // create a dummy TCanvas to remove an annoying warning
  new TCanvas();

  // Instantiate the histogram
  std::ostringstream name;
  name << "r"<<std::setfill('0')<<std::setw(6)<<e.run()<<"e"<<e.event();
  TH1F* h_wfm = new TH1F(name.str().c_str(),name.str().c_str(),n_bins, wfm_start, wfm_end);



  // loop over the bins of the histogram
  // for each bin, extract the desired samples from the waveform
  // TH1s are 1-indexed, but skip last bin to avoid edge case
  for (int ibin=1; ibin<n_bins; ++ibin) { 
    double sum = 0;
    const int bin_start_samp = wfm_start_samp + (ibin-1)*_wfm_bin_size;
    const int bin_end_samp   = bin_start_samp + _wfm_bin_size;
    if (bin_end_samp > wfm_end_samp)
      throw cet::exception("WF2TH1") << "Uh oh, something went wrong in rebinning. "
                                     << _rebin_min<<" "<<_rebin_max<<" "
                                     << ibin <<" "<<bin_start_samp<<" "<<bin_end_samp<<" "<<wfm_end_samp
                                     << std::endl;

    for (int samp = bin_start_samp; samp<bin_end_samp; ++samp)
      sum += -wfm[samp];

    h_wfm->SetBinContent(ibin,sum);
    h_wfm->SetBinError(ibin, std::sqrt(std::abs(sum)));
  }

  _tfs->file().GetDirectory("")->Append(h_wfm,false);
}

DEFINE_ART_MODULE(darkart::WF2TH1)
