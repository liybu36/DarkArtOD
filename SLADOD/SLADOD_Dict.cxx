//
// File generated by /ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/bin/rootcint at Mon Jun 29 13:39:13 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SLADOD_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SLADOD_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::ODEventInfo ODEventInfo;
      #else
      class ODEventInfo  {
         public:
         //friend XX;
         int run_id; //
         int subrun_id; //
         int event_id; //
         unsigned int gps_coarse; //GPS Coarse Time counter
         unsigned int gps_fine; //GPS Fine Time counter. It counts the number of clock cycles (50 MHz) in the second 
         unsigned short gps_pps; //1PPS counter. It counts the number of seconds since the start of the run
         double gps_timestamp_sec; //GPS timestamp in seconds of the event constructected using the 3 gps counters
         double dt_usec; //time since the last event in microsecond
         unsigned short trigger_type; //trigger types. Now it is empty      
         int bad_time_alignment; //0=good alignment, 1=time missmatch between digitizers
      };
      #endif
      } } 
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::ROICfg ROICfg;
      #else
      class ROICfg  {
         public:
         //friend XX;
         vector< int > id_vec; //
         vector< float > start_ns_vec; //
         vector< float > end_ns_vec; //
         vector< int > label_vec; //
      };
      #endif
      } } 
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::SliderCfg SliderCfg;
      #else
      class SliderCfg  {
         public:
         //friend XX;
         vector< int > id_vec; //
         vector< float > start_ns_vec; //
         vector< float > end_ns_vec; //
         vector< float > width_ns_vec; //
         vector< int > label_vec; //
      };
      #endif
      } } 
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::RunInfo RunInfo;
      #else
      class RunInfo  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::darkart::od::RunInfo::ChConfData ChConfData;
         #else
         class ChConfData  {
            public:
            //friend XX;
            int channel_type; //0: default, 1: LSV, 2: WT, -1: disabled LSV, -2: disabled WT
            double sample_rate; //
            int record_length; //
            double reference_pos; //
            bool is_enabled; //
            double vertical_range; //
            double vertical_offset; //
            double zs_enabled; //
            double zs_threshold; //
            double zs_minwidth; //
            double zs_pre; //
            double zs_post; //
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::darkart::od::RunInfo::DetectorCfg DetectorCfg;
         #else
         class DetectorCfg  {
            public:
            //friend XX;
            bool same_configuration; //
            double sample_rate_Hz; //
            int record_length; //
            double reference_pos; //
         };
         #endif

         int run_id; //
         int n_chassis; //
         vector< int > n_scopes; //
         vector< ChConfData > chHCD; //
         DetectorCfg LSVCfg; //
         DetectorCfg WTCfg; //
         ::darkart::od::ROICfg roicfg_lsv; //
         ::darkart::od::ROICfg roicfg_wt; //
         ::darkart::od::SliderCfg slidercfg_lsv; //
         ::darkart::od::SliderCfg slidercfg_wt; //
      };
      #endif
      } } 
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::ChannelData ChannelData;
      #else
      class ChannelData  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::darkart::od::ChannelData::Pulse Pulse;
         #else
         class Pulse  {
            public:
            //friend XX;
            int pulse_id; //
            int start_sample; //sample in the fADC
            double start_ns; //basically start_sample/sample_rate_GHz-trigger_time_ns
            int peak_sample; //sample corresponding to the mimimum volt waveform (maximum spe waveform)
            double peak_ns; //time corresponding to peak_sample; mainly used for laser runs
            float peak_amplitude; //minimum amplitude in V (maximum in spe) of the waveform
            int size_sample; //size of the waveform in sample 
            float pedestal_mean; //in V
            float pedestal_rms; //in V
            float integral; //in V*s or spe
            float offset; //average amplitude of the waveform (integral/length); used in pedestal calibration runs;Will not be changed in Saturation.
            float saturation_correction; //same units of integral variable
            float saturation_width; //
            bool is_saturated; //
         };
         #endif

         typedef ::std::vector< ::darkart::od::ChannelData::Pulse, ::allocator< ::darkart::od::ChannelData::Pulse> > pulses_t;
         int chassis; //
         int board; //
         int channel; //specific to the board
         int channel_id; //global ID
         int channel_type; //0: default 1: LSV, 2: WT, -1: disabled LSV, -2: disable WT
         bool is_enabled; //
         int npulses; //
         pulses_t pulses; //
      };
      #endif
      } } 
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::Cluster Cluster;
      #else
      class Cluster  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::darkart::od::Cluster::Shape Shape;
         #else
         class Shape  {
            public:
            //friend XX;
            float mean_time_ns; //first moment of the cluster pdf, weighted on amplitude
            float sigma_mean_ns; //second moment with respect to the mean time 
            float sigma_peak_ns; //second moment with respect to the peak time
            float skewness; //second moment 
            float skewness_max; //second moment calculated only on the main pulse without considering small pulses close to it 
            float skewness_10to90; //second moment calculated only between the time in witch the charge reaches 10% and the time in witch the charge reaches 90% 
            float kurtosis; //second moment 
            float a10_time_ns; //time when the amplitude is 10% of max_amplitude
            float a90_time_ns; //time when the amplitude is 90% of max_amplitude
            float rise10_time_ns; //a90_time - a10_time
            float rise90_time_ns; //a90_time - a10_time
            float above_thr_time_ns; //time above threshold
            float c10_time_ns; //time when the charge is 10% of the total charge
            float c90_time_ns; //time when the charge is 90% of the total charge
            float f30; //fractional charge in first  50 ns
            float f50; //fractional charge in first 100 ns
            float f60; //fractional charge in first 200 ns
            float tail50_to_total; //fractional charge after the first 20 ns
            float tail60_to_total; //fractional charge after the first 20 ns
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::darkart::od::Cluster::PMTDistribution PMTDistribution;
         #else
         class PMTDistribution  {
            public:
            //friend XX;
            int max_ch; //channel with maximum charge
            float max_ch_fraction; //fraction of charge holded by the max_ch
            float pmt_charge_mean; //mean charge for each pmt within the cluster
            float pmt_charge_variance; //variance relative to the pmt_charge_mean
         };
         #endif

         int cluster_id; //
         int start_sample; //
         int end_sample; //
         int peak_sample; //
         int max_multiplicity; //
         float charge; //
         float height; //
         float start_ns; //
         float end_ns; //
         float peak_ns; //
         Shape* shape; //
         ::darkart::od::ChPulsePairVec ch_pulse_pairs; //
         PMTDistribution* pmt_distr; //
      };
      #endif
      } } 
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::ROI ROI;
      #else
      class ROI  {
         public:
         //friend XX;
         vector< int > id_vec; //
         vector< float > charge_vec; //
         vector< int > max_multiplicity_vec; //
      };
      #endif
      } } 
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::Slider Slider;
      #else
      class Slider  {
         public:
         //friend XX;
         vector< int > id_vec; //
         vector< float > charge_vec; //
         vector< float > time_ns_vec; //
         vector< int > max_multiplicity_vec; //
      };
      #endif
      } } 
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::TotalCharge TotalCharge;
      #else
      class TotalCharge  {
         public:
         //friend XX;
         float lsv_total_charge; //
         float wt_total_charge; //
         vector< float > chan_charge_vec; //
      };
      #endif
      } } 
      namespace darkart {
         namespace od {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::darkart::od::ODEventData ODEventData;
      #else
      class ODEventData  {
         public:
         //friend XX;
         string darkart_version; //
         ::darkart::od::ODEventInfo event_info; //
         vector< ::darkart::od::ChannelData > channel_data; //
         int nclusters_lsv; //
         int nclusters_wt; //
         vector< ::darkart::od::Cluster > clusters_lsv; //
         vector< ::darkart::od::Cluster > clusters_wt; //
         ::darkart::od::ROI roi_lsv; //
         ::darkart::od::ROI roi_wt; //
         ::darkart::od::Slider slider_lsv; //
         ::darkart::od::Slider slider_wt; //
         ::darkart::od::TotalCharge total_charge; //
      };
      #endif
      } } 
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void darkartcLcLodcLcLODEventInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLODEventInfo_Dictionary();
   static void *new_darkartcLcLodcLcLODEventInfo(void *p = 0);
   static void *newArray_darkartcLcLodcLcLODEventInfo(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLODEventInfo(void *p);
   static void deleteArray_darkartcLcLodcLcLODEventInfo(void *p);
   static void destruct_darkartcLcLodcLcLODEventInfo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::ODEventInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::ODEventInfo) == sizeof( ::ROOTShadow::Shadow::darkart::od::ODEventInfo));
      ::darkart::od::ODEventInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::ODEventInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::ODEventInfo", "./../darkart/ODProducts/ODEventInfo.hh", 20,
                  typeid(::darkart::od::ODEventInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLODEventInfo_ShowMembers, &darkartcLcLodcLcLODEventInfo_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::ODEventInfo) );
      instance.SetNew(&new_darkartcLcLodcLcLODEventInfo);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLODEventInfo);
      instance.SetDelete(&delete_darkartcLcLodcLcLODEventInfo);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLODEventInfo);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLODEventInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::ODEventInfo*)
   {
      return GenerateInitInstanceLocal((::darkart::od::ODEventInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::ODEventInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLODEventInfo_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ODEventInfo*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLROICfg_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLROICfg_Dictionary();
   static void *new_darkartcLcLodcLcLROICfg(void *p = 0);
   static void *newArray_darkartcLcLodcLcLROICfg(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLROICfg(void *p);
   static void deleteArray_darkartcLcLodcLcLROICfg(void *p);
   static void destruct_darkartcLcLodcLcLROICfg(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::ROICfg*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::ROICfg) == sizeof( ::ROOTShadow::Shadow::darkart::od::ROICfg));
      ::darkart::od::ROICfg *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::ROICfg),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::ROICfg", "./../darkart/ODProducts/ROICfg.hh", 20,
                  typeid(::darkart::od::ROICfg), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLROICfg_ShowMembers, &darkartcLcLodcLcLROICfg_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::ROICfg) );
      instance.SetNew(&new_darkartcLcLodcLcLROICfg);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLROICfg);
      instance.SetDelete(&delete_darkartcLcLodcLcLROICfg);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLROICfg);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLROICfg);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::ROICfg*)
   {
      return GenerateInitInstanceLocal((::darkart::od::ROICfg*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::ROICfg*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLROICfg_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ROICfg*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLSliderCfg_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLSliderCfg_Dictionary();
   static void *new_darkartcLcLodcLcLSliderCfg(void *p = 0);
   static void *newArray_darkartcLcLodcLcLSliderCfg(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLSliderCfg(void *p);
   static void deleteArray_darkartcLcLodcLcLSliderCfg(void *p);
   static void destruct_darkartcLcLodcLcLSliderCfg(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::SliderCfg*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::SliderCfg) == sizeof( ::ROOTShadow::Shadow::darkart::od::SliderCfg));
      ::darkart::od::SliderCfg *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::SliderCfg),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::SliderCfg", "./../darkart/ODProducts/SliderCfg.hh", 19,
                  typeid(::darkart::od::SliderCfg), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLSliderCfg_ShowMembers, &darkartcLcLodcLcLSliderCfg_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::SliderCfg) );
      instance.SetNew(&new_darkartcLcLodcLcLSliderCfg);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLSliderCfg);
      instance.SetDelete(&delete_darkartcLcLodcLcLSliderCfg);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLSliderCfg);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLSliderCfg);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::SliderCfg*)
   {
      return GenerateInitInstanceLocal((::darkart::od::SliderCfg*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::SliderCfg*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLSliderCfg_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::SliderCfg*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLRunInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLRunInfo_Dictionary();
   static void *new_darkartcLcLodcLcLRunInfo(void *p = 0);
   static void *newArray_darkartcLcLodcLcLRunInfo(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLRunInfo(void *p);
   static void deleteArray_darkartcLcLodcLcLRunInfo(void *p);
   static void destruct_darkartcLcLodcLcLRunInfo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::RunInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::RunInfo) == sizeof( ::ROOTShadow::Shadow::darkart::od::RunInfo));
      ::darkart::od::RunInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::RunInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::RunInfo", "./../darkart/ODProducts/RunInfo.hh", 25,
                  typeid(::darkart::od::RunInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLRunInfo_ShowMembers, &darkartcLcLodcLcLRunInfo_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::RunInfo) );
      instance.SetNew(&new_darkartcLcLodcLcLRunInfo);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLRunInfo);
      instance.SetDelete(&delete_darkartcLcLodcLcLRunInfo);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLRunInfo);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLRunInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::RunInfo*)
   {
      return GenerateInitInstanceLocal((::darkart::od::RunInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::RunInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLRunInfo_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::RunInfo*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLRunInfocLcLChConfData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLRunInfocLcLChConfData_Dictionary();
   static void *new_darkartcLcLodcLcLRunInfocLcLChConfData(void *p = 0);
   static void *newArray_darkartcLcLodcLcLRunInfocLcLChConfData(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLRunInfocLcLChConfData(void *p);
   static void deleteArray_darkartcLcLodcLcLRunInfocLcLChConfData(void *p);
   static void destruct_darkartcLcLodcLcLRunInfocLcLChConfData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::RunInfo::ChConfData*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::RunInfo::ChConfData) == sizeof( ::ROOTShadow::Shadow::darkart::od::RunInfo::ChConfData));
      ::darkart::od::RunInfo::ChConfData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::RunInfo::ChConfData),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::RunInfo::ChConfData", "./../darkart/ODProducts/RunInfo.hh", 40,
                  typeid(::darkart::od::RunInfo::ChConfData), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLRunInfocLcLChConfData_ShowMembers, &darkartcLcLodcLcLRunInfocLcLChConfData_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::RunInfo::ChConfData) );
      instance.SetNew(&new_darkartcLcLodcLcLRunInfocLcLChConfData);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLRunInfocLcLChConfData);
      instance.SetDelete(&delete_darkartcLcLodcLcLRunInfocLcLChConfData);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLRunInfocLcLChConfData);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLRunInfocLcLChConfData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::RunInfo::ChConfData*)
   {
      return GenerateInitInstanceLocal((::darkart::od::RunInfo::ChConfData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::RunInfo::ChConfData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLRunInfocLcLChConfData_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::RunInfo::ChConfData*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLRunInfocLcLDetectorCfg_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLRunInfocLcLDetectorCfg_Dictionary();
   static void *new_darkartcLcLodcLcLRunInfocLcLDetectorCfg(void *p = 0);
   static void *newArray_darkartcLcLodcLcLRunInfocLcLDetectorCfg(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLRunInfocLcLDetectorCfg(void *p);
   static void deleteArray_darkartcLcLodcLcLRunInfocLcLDetectorCfg(void *p);
   static void destruct_darkartcLcLodcLcLRunInfocLcLDetectorCfg(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::RunInfo::DetectorCfg*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::RunInfo::DetectorCfg) == sizeof( ::ROOTShadow::Shadow::darkart::od::RunInfo::DetectorCfg));
      ::darkart::od::RunInfo::DetectorCfg *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::RunInfo::DetectorCfg),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::RunInfo::DetectorCfg", "./../darkart/ODProducts/RunInfo.hh", 70,
                  typeid(::darkart::od::RunInfo::DetectorCfg), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLRunInfocLcLDetectorCfg_ShowMembers, &darkartcLcLodcLcLRunInfocLcLDetectorCfg_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::RunInfo::DetectorCfg) );
      instance.SetNew(&new_darkartcLcLodcLcLRunInfocLcLDetectorCfg);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLRunInfocLcLDetectorCfg);
      instance.SetDelete(&delete_darkartcLcLodcLcLRunInfocLcLDetectorCfg);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLRunInfocLcLDetectorCfg);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLRunInfocLcLDetectorCfg);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::RunInfo::DetectorCfg*)
   {
      return GenerateInitInstanceLocal((::darkart::od::RunInfo::DetectorCfg*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::RunInfo::DetectorCfg*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLRunInfocLcLDetectorCfg_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::RunInfo::DetectorCfg*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLChannelData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLChannelData_Dictionary();
   static void *new_darkartcLcLodcLcLChannelData(void *p = 0);
   static void *newArray_darkartcLcLodcLcLChannelData(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLChannelData(void *p);
   static void deleteArray_darkartcLcLodcLcLChannelData(void *p);
   static void destruct_darkartcLcLodcLcLChannelData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::ChannelData*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::ChannelData) == sizeof( ::ROOTShadow::Shadow::darkart::od::ChannelData));
      ::darkart::od::ChannelData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::ChannelData),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::ChannelData", "./../darkart/ODProducts/ChannelData.hh", 19,
                  typeid(::darkart::od::ChannelData), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLChannelData_ShowMembers, &darkartcLcLodcLcLChannelData_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::ChannelData) );
      instance.SetNew(&new_darkartcLcLodcLcLChannelData);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLChannelData);
      instance.SetDelete(&delete_darkartcLcLodcLcLChannelData);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLChannelData);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLChannelData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::ChannelData*)
   {
      return GenerateInitInstanceLocal((::darkart::od::ChannelData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::ChannelData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLChannelData_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ChannelData*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLChannelDatacLcLPulse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLChannelDatacLcLPulse_Dictionary();
   static void *new_darkartcLcLodcLcLChannelDatacLcLPulse(void *p = 0);
   static void *newArray_darkartcLcLodcLcLChannelDatacLcLPulse(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLChannelDatacLcLPulse(void *p);
   static void deleteArray_darkartcLcLodcLcLChannelDatacLcLPulse(void *p);
   static void destruct_darkartcLcLodcLcLChannelDatacLcLPulse(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::ChannelData::Pulse*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::ChannelData::Pulse) == sizeof( ::ROOTShadow::Shadow::darkart::od::ChannelData::Pulse));
      ::darkart::od::ChannelData::Pulse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::ChannelData::Pulse),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::ChannelData::Pulse", "./../darkart/ODProducts/ChannelData.hh", 53,
                  typeid(::darkart::od::ChannelData::Pulse), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLChannelDatacLcLPulse_ShowMembers, &darkartcLcLodcLcLChannelDatacLcLPulse_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::ChannelData::Pulse) );
      instance.SetNew(&new_darkartcLcLodcLcLChannelDatacLcLPulse);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLChannelDatacLcLPulse);
      instance.SetDelete(&delete_darkartcLcLodcLcLChannelDatacLcLPulse);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLChannelDatacLcLPulse);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLChannelDatacLcLPulse);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::ChannelData::Pulse*)
   {
      return GenerateInitInstanceLocal((::darkart::od::ChannelData::Pulse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::ChannelData::Pulse*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLChannelDatacLcLPulse_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ChannelData::Pulse*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLCluster_Dictionary();
   static void *new_darkartcLcLodcLcLCluster(void *p = 0);
   static void *newArray_darkartcLcLodcLcLCluster(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLCluster(void *p);
   static void deleteArray_darkartcLcLodcLcLCluster(void *p);
   static void destruct_darkartcLcLodcLcLCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::Cluster*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::Cluster) == sizeof( ::ROOTShadow::Shadow::darkart::od::Cluster));
      ::darkart::od::Cluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::Cluster),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::Cluster", "./../darkart/ODProducts/Cluster.hh", 23,
                  typeid(::darkart::od::Cluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLCluster_ShowMembers, &darkartcLcLodcLcLCluster_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::Cluster) );
      instance.SetNew(&new_darkartcLcLodcLcLCluster);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLCluster);
      instance.SetDelete(&delete_darkartcLcLodcLcLCluster);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLCluster);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::Cluster*)
   {
      return GenerateInitInstanceLocal((::darkart::od::Cluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::Cluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLCluster_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::Cluster*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLClustercLcLShape_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLClustercLcLShape_Dictionary();
   static void *new_darkartcLcLodcLcLClustercLcLShape(void *p = 0);
   static void *newArray_darkartcLcLodcLcLClustercLcLShape(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLClustercLcLShape(void *p);
   static void deleteArray_darkartcLcLodcLcLClustercLcLShape(void *p);
   static void destruct_darkartcLcLodcLcLClustercLcLShape(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::Cluster::Shape*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::Cluster::Shape) == sizeof( ::ROOTShadow::Shadow::darkart::od::Cluster::Shape));
      ::darkart::od::Cluster::Shape *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::Cluster::Shape),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::Cluster::Shape", "./../darkart/ODProducts/Cluster.hh", 63,
                  typeid(::darkart::od::Cluster::Shape), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLClustercLcLShape_ShowMembers, &darkartcLcLodcLcLClustercLcLShape_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::Cluster::Shape) );
      instance.SetNew(&new_darkartcLcLodcLcLClustercLcLShape);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLClustercLcLShape);
      instance.SetDelete(&delete_darkartcLcLodcLcLClustercLcLShape);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLClustercLcLShape);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLClustercLcLShape);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::Cluster::Shape*)
   {
      return GenerateInitInstanceLocal((::darkart::od::Cluster::Shape*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::Cluster::Shape*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLClustercLcLShape_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::Cluster::Shape*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLClustercLcLPMTDistribution_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLClustercLcLPMTDistribution_Dictionary();
   static void *new_darkartcLcLodcLcLClustercLcLPMTDistribution(void *p = 0);
   static void *newArray_darkartcLcLodcLcLClustercLcLPMTDistribution(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLClustercLcLPMTDistribution(void *p);
   static void deleteArray_darkartcLcLodcLcLClustercLcLPMTDistribution(void *p);
   static void destruct_darkartcLcLodcLcLClustercLcLPMTDistribution(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::Cluster::PMTDistribution*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::Cluster::PMTDistribution) == sizeof( ::ROOTShadow::Shadow::darkart::od::Cluster::PMTDistribution));
      ::darkart::od::Cluster::PMTDistribution *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::Cluster::PMTDistribution),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::Cluster::PMTDistribution", "./../darkart/ODProducts/Cluster.hh", 89,
                  typeid(::darkart::od::Cluster::PMTDistribution), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLClustercLcLPMTDistribution_ShowMembers, &darkartcLcLodcLcLClustercLcLPMTDistribution_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::Cluster::PMTDistribution) );
      instance.SetNew(&new_darkartcLcLodcLcLClustercLcLPMTDistribution);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLClustercLcLPMTDistribution);
      instance.SetDelete(&delete_darkartcLcLodcLcLClustercLcLPMTDistribution);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLClustercLcLPMTDistribution);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLClustercLcLPMTDistribution);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::Cluster::PMTDistribution*)
   {
      return GenerateInitInstanceLocal((::darkart::od::Cluster::PMTDistribution*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::Cluster::PMTDistribution*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLClustercLcLPMTDistribution_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::Cluster::PMTDistribution*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLROI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLROI_Dictionary();
   static void *new_darkartcLcLodcLcLROI(void *p = 0);
   static void *newArray_darkartcLcLodcLcLROI(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLROI(void *p);
   static void deleteArray_darkartcLcLodcLcLROI(void *p);
   static void destruct_darkartcLcLodcLcLROI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::ROI*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::ROI) == sizeof( ::ROOTShadow::Shadow::darkart::od::ROI));
      ::darkart::od::ROI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::ROI),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::ROI", "./../darkart/ODProducts/ROI.hh", 20,
                  typeid(::darkart::od::ROI), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLROI_ShowMembers, &darkartcLcLodcLcLROI_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::ROI) );
      instance.SetNew(&new_darkartcLcLodcLcLROI);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLROI);
      instance.SetDelete(&delete_darkartcLcLodcLcLROI);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLROI);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLROI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::ROI*)
   {
      return GenerateInitInstanceLocal((::darkart::od::ROI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::ROI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLROI_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ROI*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLSlider_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLSlider_Dictionary();
   static void *new_darkartcLcLodcLcLSlider(void *p = 0);
   static void *newArray_darkartcLcLodcLcLSlider(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLSlider(void *p);
   static void deleteArray_darkartcLcLodcLcLSlider(void *p);
   static void destruct_darkartcLcLodcLcLSlider(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::Slider*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::Slider) == sizeof( ::ROOTShadow::Shadow::darkart::od::Slider));
      ::darkart::od::Slider *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::Slider),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::Slider", "./../darkart/ODProducts/Slider.hh", 19,
                  typeid(::darkart::od::Slider), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLSlider_ShowMembers, &darkartcLcLodcLcLSlider_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::Slider) );
      instance.SetNew(&new_darkartcLcLodcLcLSlider);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLSlider);
      instance.SetDelete(&delete_darkartcLcLodcLcLSlider);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLSlider);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLSlider);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::Slider*)
   {
      return GenerateInitInstanceLocal((::darkart::od::Slider*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::Slider*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLSlider_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::Slider*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLTotalCharge_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLTotalCharge_Dictionary();
   static void *new_darkartcLcLodcLcLTotalCharge(void *p = 0);
   static void *newArray_darkartcLcLodcLcLTotalCharge(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLTotalCharge(void *p);
   static void deleteArray_darkartcLcLodcLcLTotalCharge(void *p);
   static void destruct_darkartcLcLodcLcLTotalCharge(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::TotalCharge*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::TotalCharge) == sizeof( ::ROOTShadow::Shadow::darkart::od::TotalCharge));
      ::darkart::od::TotalCharge *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::TotalCharge),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::TotalCharge", "./../darkart/ODProducts/TotalCharge.hh", 20,
                  typeid(::darkart::od::TotalCharge), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLTotalCharge_ShowMembers, &darkartcLcLodcLcLTotalCharge_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::TotalCharge) );
      instance.SetNew(&new_darkartcLcLodcLcLTotalCharge);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLTotalCharge);
      instance.SetDelete(&delete_darkartcLcLodcLcLTotalCharge);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLTotalCharge);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLTotalCharge);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::TotalCharge*)
   {
      return GenerateInitInstanceLocal((::darkart::od::TotalCharge*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::TotalCharge*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLTotalCharge_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::TotalCharge*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void darkartcLcLodcLcLODEventData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void darkartcLcLodcLcLODEventData_Dictionary();
   static void *new_darkartcLcLodcLcLODEventData(void *p = 0);
   static void *newArray_darkartcLcLodcLcLODEventData(Long_t size, void *p);
   static void delete_darkartcLcLodcLcLODEventData(void *p);
   static void deleteArray_darkartcLcLodcLcLODEventData(void *p);
   static void destruct_darkartcLcLodcLcLODEventData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::darkart::od::ODEventData*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::darkart::od::ODEventData) == sizeof( ::ROOTShadow::Shadow::darkart::od::ODEventData));
      ::darkart::od::ODEventData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::darkart::od::ODEventData),0);
      static ::ROOT::TGenericClassInfo 
         instance("darkart::od::ODEventData", "./../darkart/ODProducts/ODEventData.hh", 40,
                  typeid(::darkart::od::ODEventData), ::ROOT::DefineBehavior(ptr, ptr),
                  &darkartcLcLodcLcLODEventData_ShowMembers, &darkartcLcLodcLcLODEventData_Dictionary, isa_proxy, 4,
                  sizeof(::darkart::od::ODEventData) );
      instance.SetNew(&new_darkartcLcLodcLcLODEventData);
      instance.SetNewArray(&newArray_darkartcLcLodcLcLODEventData);
      instance.SetDelete(&delete_darkartcLcLodcLcLODEventData);
      instance.SetDeleteArray(&deleteArray_darkartcLcLodcLcLODEventData);
      instance.SetDestructor(&destruct_darkartcLcLodcLcLODEventData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::darkart::od::ODEventData*)
   {
      return GenerateInitInstanceLocal((::darkart::od::ODEventData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::darkart::od::ODEventData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void darkartcLcLodcLcLODEventData_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ODEventData*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLODEventInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::ODEventInfo.
      typedef ::ROOTShadow::Shadow::darkart::od::ODEventInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ODEventInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run_id", &sobj->run_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subrun_id", &sobj->subrun_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_id", &sobj->event_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gps_coarse", &sobj->gps_coarse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gps_fine", &sobj->gps_fine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gps_pps", &sobj->gps_pps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gps_timestamp_sec", &sobj->gps_timestamp_sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dt_usec", &sobj->dt_usec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigger_type", &sobj->trigger_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bad_time_alignment", &sobj->bad_time_alignment);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLODEventInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ODEventInfo : new ::darkart::od::ODEventInfo;
   }
   static void *newArray_darkartcLcLodcLcLODEventInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ODEventInfo[nElements] : new ::darkart::od::ODEventInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLODEventInfo(void *p) {
      delete ((::darkart::od::ODEventInfo*)p);
   }
   static void deleteArray_darkartcLcLodcLcLODEventInfo(void *p) {
      delete [] ((::darkart::od::ODEventInfo*)p);
   }
   static void destruct_darkartcLcLodcLcLODEventInfo(void *p) {
      typedef ::darkart::od::ODEventInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::ODEventInfo

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLROICfg_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::ROICfg.
      typedef ::ROOTShadow::Shadow::darkart::od::ROICfg ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ROICfg*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_vec", (void*)&sobj->id_vec);
      R__insp.InspectMember("vector<int>", (void*)&sobj->id_vec, "id_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start_ns_vec", (void*)&sobj->start_ns_vec);
      R__insp.InspectMember("vector<float>", (void*)&sobj->start_ns_vec, "start_ns_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "end_ns_vec", (void*)&sobj->end_ns_vec);
      R__insp.InspectMember("vector<float>", (void*)&sobj->end_ns_vec, "end_ns_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "label_vec", (void*)&sobj->label_vec);
      R__insp.InspectMember("vector<int>", (void*)&sobj->label_vec, "label_vec.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLROICfg(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ROICfg : new ::darkart::od::ROICfg;
   }
   static void *newArray_darkartcLcLodcLcLROICfg(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ROICfg[nElements] : new ::darkart::od::ROICfg[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLROICfg(void *p) {
      delete ((::darkart::od::ROICfg*)p);
   }
   static void deleteArray_darkartcLcLodcLcLROICfg(void *p) {
      delete [] ((::darkart::od::ROICfg*)p);
   }
   static void destruct_darkartcLcLodcLcLROICfg(void *p) {
      typedef ::darkart::od::ROICfg current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::ROICfg

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLSliderCfg_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::SliderCfg.
      typedef ::ROOTShadow::Shadow::darkart::od::SliderCfg ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::SliderCfg*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_vec", (void*)&sobj->id_vec);
      R__insp.InspectMember("vector<int>", (void*)&sobj->id_vec, "id_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start_ns_vec", (void*)&sobj->start_ns_vec);
      R__insp.InspectMember("vector<float>", (void*)&sobj->start_ns_vec, "start_ns_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "end_ns_vec", (void*)&sobj->end_ns_vec);
      R__insp.InspectMember("vector<float>", (void*)&sobj->end_ns_vec, "end_ns_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width_ns_vec", (void*)&sobj->width_ns_vec);
      R__insp.InspectMember("vector<float>", (void*)&sobj->width_ns_vec, "width_ns_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "label_vec", (void*)&sobj->label_vec);
      R__insp.InspectMember("vector<int>", (void*)&sobj->label_vec, "label_vec.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLSliderCfg(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::SliderCfg : new ::darkart::od::SliderCfg;
   }
   static void *newArray_darkartcLcLodcLcLSliderCfg(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::SliderCfg[nElements] : new ::darkart::od::SliderCfg[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLSliderCfg(void *p) {
      delete ((::darkart::od::SliderCfg*)p);
   }
   static void deleteArray_darkartcLcLodcLcLSliderCfg(void *p) {
      delete [] ((::darkart::od::SliderCfg*)p);
   }
   static void destruct_darkartcLcLodcLcLSliderCfg(void *p) {
      typedef ::darkart::od::SliderCfg current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::SliderCfg

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLRunInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::RunInfo.
      typedef ::ROOTShadow::Shadow::darkart::od::RunInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::RunInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run_id", &sobj->run_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_chassis", &sobj->n_chassis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_scopes", (void*)&sobj->n_scopes);
      R__insp.InspectMember("vector<int>", (void*)&sobj->n_scopes, "n_scopes.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chHCD", (void*)&sobj->chHCD);
      R__insp.InspectMember("vector<ChConfData>", (void*)&sobj->chHCD, "chHCD.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LSVCfg", (void*)&sobj->LSVCfg);
      R__insp.InspectMember("darkart::od::RunInfo::DetectorCfg", (void*)&sobj->LSVCfg, "LSVCfg.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WTCfg", (void*)&sobj->WTCfg);
      R__insp.InspectMember("darkart::od::RunInfo::DetectorCfg", (void*)&sobj->WTCfg, "WTCfg.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "roicfg_lsv", (void*)&sobj->roicfg_lsv);
      R__insp.InspectMember("darkart::od::ROICfg", (void*)&sobj->roicfg_lsv, "roicfg_lsv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "roicfg_wt", (void*)&sobj->roicfg_wt);
      R__insp.InspectMember("darkart::od::ROICfg", (void*)&sobj->roicfg_wt, "roicfg_wt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slidercfg_lsv", (void*)&sobj->slidercfg_lsv);
      R__insp.InspectMember("darkart::od::SliderCfg", (void*)&sobj->slidercfg_lsv, "slidercfg_lsv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slidercfg_wt", (void*)&sobj->slidercfg_wt);
      R__insp.InspectMember("darkart::od::SliderCfg", (void*)&sobj->slidercfg_wt, "slidercfg_wt.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLRunInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::RunInfo : new ::darkart::od::RunInfo;
   }
   static void *newArray_darkartcLcLodcLcLRunInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::RunInfo[nElements] : new ::darkart::od::RunInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLRunInfo(void *p) {
      delete ((::darkart::od::RunInfo*)p);
   }
   static void deleteArray_darkartcLcLodcLcLRunInfo(void *p) {
      delete [] ((::darkart::od::RunInfo*)p);
   }
   static void destruct_darkartcLcLodcLcLRunInfo(void *p) {
      typedef ::darkart::od::RunInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::RunInfo

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLRunInfocLcLChConfData_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::RunInfo::ChConfData.
      typedef ::ROOTShadow::Shadow::darkart::od::RunInfo::ChConfData ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::RunInfo::ChConfData*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel_type", &sobj->channel_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sample_rate", &sobj->sample_rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "record_length", &sobj->record_length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reference_pos", &sobj->reference_pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "is_enabled", &sobj->is_enabled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertical_range", &sobj->vertical_range);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertical_offset", &sobj->vertical_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zs_enabled", &sobj->zs_enabled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zs_threshold", &sobj->zs_threshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zs_minwidth", &sobj->zs_minwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zs_pre", &sobj->zs_pre);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zs_post", &sobj->zs_post);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLRunInfocLcLChConfData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::RunInfo::ChConfData : new ::darkart::od::RunInfo::ChConfData;
   }
   static void *newArray_darkartcLcLodcLcLRunInfocLcLChConfData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::RunInfo::ChConfData[nElements] : new ::darkart::od::RunInfo::ChConfData[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLRunInfocLcLChConfData(void *p) {
      delete ((::darkart::od::RunInfo::ChConfData*)p);
   }
   static void deleteArray_darkartcLcLodcLcLRunInfocLcLChConfData(void *p) {
      delete [] ((::darkart::od::RunInfo::ChConfData*)p);
   }
   static void destruct_darkartcLcLodcLcLRunInfocLcLChConfData(void *p) {
      typedef ::darkart::od::RunInfo::ChConfData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::RunInfo::ChConfData

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLRunInfocLcLDetectorCfg_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::RunInfo::DetectorCfg.
      typedef ::ROOTShadow::Shadow::darkart::od::RunInfo::DetectorCfg ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::RunInfo::DetectorCfg*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "same_configuration", &sobj->same_configuration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sample_rate_Hz", &sobj->sample_rate_Hz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "record_length", &sobj->record_length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reference_pos", &sobj->reference_pos);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLRunInfocLcLDetectorCfg(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::RunInfo::DetectorCfg : new ::darkart::od::RunInfo::DetectorCfg;
   }
   static void *newArray_darkartcLcLodcLcLRunInfocLcLDetectorCfg(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::RunInfo::DetectorCfg[nElements] : new ::darkart::od::RunInfo::DetectorCfg[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLRunInfocLcLDetectorCfg(void *p) {
      delete ((::darkart::od::RunInfo::DetectorCfg*)p);
   }
   static void deleteArray_darkartcLcLodcLcLRunInfocLcLDetectorCfg(void *p) {
      delete [] ((::darkart::od::RunInfo::DetectorCfg*)p);
   }
   static void destruct_darkartcLcLodcLcLRunInfocLcLDetectorCfg(void *p) {
      typedef ::darkart::od::RunInfo::DetectorCfg current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::RunInfo::DetectorCfg

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLChannelData_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::ChannelData.
      typedef ::ROOTShadow::Shadow::darkart::od::ChannelData ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ChannelData*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chassis", &sobj->chassis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "board", &sobj->board);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel", &sobj->channel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel_id", &sobj->channel_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel_type", &sobj->channel_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "is_enabled", &sobj->is_enabled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npulses", &sobj->npulses);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pulses", (void*)&sobj->pulses);
      R__insp.InspectMember("darkart::od::ChannelData::pulses_t", (void*)&sobj->pulses, "pulses.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLChannelData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ChannelData : new ::darkart::od::ChannelData;
   }
   static void *newArray_darkartcLcLodcLcLChannelData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ChannelData[nElements] : new ::darkart::od::ChannelData[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLChannelData(void *p) {
      delete ((::darkart::od::ChannelData*)p);
   }
   static void deleteArray_darkartcLcLodcLcLChannelData(void *p) {
      delete [] ((::darkart::od::ChannelData*)p);
   }
   static void destruct_darkartcLcLodcLcLChannelData(void *p) {
      typedef ::darkart::od::ChannelData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::ChannelData

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLChannelDatacLcLPulse_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::ChannelData::Pulse.
      typedef ::ROOTShadow::Shadow::darkart::od::ChannelData::Pulse ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ChannelData::Pulse*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pulse_id", &sobj->pulse_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start_sample", &sobj->start_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start_ns", &sobj->start_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_sample", &sobj->peak_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_ns", &sobj->peak_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_amplitude", &sobj->peak_amplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size_sample", &sobj->size_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pedestal_mean", &sobj->pedestal_mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pedestal_rms", &sobj->pedestal_rms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "integral", &sobj->integral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset", &sobj->offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saturation_correction", &sobj->saturation_correction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saturation_width", &sobj->saturation_width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "is_saturated", &sobj->is_saturated);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLChannelDatacLcLPulse(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ChannelData::Pulse : new ::darkart::od::ChannelData::Pulse;
   }
   static void *newArray_darkartcLcLodcLcLChannelDatacLcLPulse(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ChannelData::Pulse[nElements] : new ::darkart::od::ChannelData::Pulse[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLChannelDatacLcLPulse(void *p) {
      delete ((::darkart::od::ChannelData::Pulse*)p);
   }
   static void deleteArray_darkartcLcLodcLcLChannelDatacLcLPulse(void *p) {
      delete [] ((::darkart::od::ChannelData::Pulse*)p);
   }
   static void destruct_darkartcLcLodcLcLChannelDatacLcLPulse(void *p) {
      typedef ::darkart::od::ChannelData::Pulse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::ChannelData::Pulse

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLCluster_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::Cluster.
      typedef ::ROOTShadow::Shadow::darkart::od::Cluster ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::Cluster*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cluster_id", &sobj->cluster_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start_sample", &sobj->start_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "end_sample", &sobj->end_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_sample", &sobj->peak_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "max_multiplicity", &sobj->max_multiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &sobj->charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "height", &sobj->height);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start_ns", &sobj->start_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "end_ns", &sobj->end_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak_ns", &sobj->peak_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shape", &sobj->shape);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch_pulse_pairs", (void*)&sobj->ch_pulse_pairs);
      R__insp.InspectMember("darkart::od::ChPulsePairVec", (void*)&sobj->ch_pulse_pairs, "ch_pulse_pairs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pmt_distr", &sobj->pmt_distr);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLCluster(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::Cluster : new ::darkart::od::Cluster;
   }
   static void *newArray_darkartcLcLodcLcLCluster(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::Cluster[nElements] : new ::darkart::od::Cluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLCluster(void *p) {
      delete ((::darkart::od::Cluster*)p);
   }
   static void deleteArray_darkartcLcLodcLcLCluster(void *p) {
      delete [] ((::darkart::od::Cluster*)p);
   }
   static void destruct_darkartcLcLodcLcLCluster(void *p) {
      typedef ::darkart::od::Cluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::Cluster

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLClustercLcLShape_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::Cluster::Shape.
      typedef ::ROOTShadow::Shadow::darkart::od::Cluster::Shape ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::Cluster::Shape*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mean_time_ns", &sobj->mean_time_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_mean_ns", &sobj->sigma_mean_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_peak_ns", &sobj->sigma_peak_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skewness", &sobj->skewness);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skewness_max", &sobj->skewness_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skewness_10to90", &sobj->skewness_10to90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kurtosis", &sobj->kurtosis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a10_time_ns", &sobj->a10_time_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a90_time_ns", &sobj->a90_time_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rise10_time_ns", &sobj->rise10_time_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rise90_time_ns", &sobj->rise90_time_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "above_thr_time_ns", &sobj->above_thr_time_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c10_time_ns", &sobj->c10_time_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c90_time_ns", &sobj->c90_time_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f30", &sobj->f30);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f50", &sobj->f50);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f60", &sobj->f60);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tail50_to_total", &sobj->tail50_to_total);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tail60_to_total", &sobj->tail60_to_total);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLClustercLcLShape(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::Cluster::Shape : new ::darkart::od::Cluster::Shape;
   }
   static void *newArray_darkartcLcLodcLcLClustercLcLShape(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::Cluster::Shape[nElements] : new ::darkart::od::Cluster::Shape[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLClustercLcLShape(void *p) {
      delete ((::darkart::od::Cluster::Shape*)p);
   }
   static void deleteArray_darkartcLcLodcLcLClustercLcLShape(void *p) {
      delete [] ((::darkart::od::Cluster::Shape*)p);
   }
   static void destruct_darkartcLcLodcLcLClustercLcLShape(void *p) {
      typedef ::darkart::od::Cluster::Shape current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::Cluster::Shape

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLClustercLcLPMTDistribution_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::Cluster::PMTDistribution.
      typedef ::ROOTShadow::Shadow::darkart::od::Cluster::PMTDistribution ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::Cluster::PMTDistribution*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "max_ch", &sobj->max_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "max_ch_fraction", &sobj->max_ch_fraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pmt_charge_mean", &sobj->pmt_charge_mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pmt_charge_variance", &sobj->pmt_charge_variance);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLClustercLcLPMTDistribution(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::Cluster::PMTDistribution : new ::darkart::od::Cluster::PMTDistribution;
   }
   static void *newArray_darkartcLcLodcLcLClustercLcLPMTDistribution(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::Cluster::PMTDistribution[nElements] : new ::darkart::od::Cluster::PMTDistribution[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLClustercLcLPMTDistribution(void *p) {
      delete ((::darkart::od::Cluster::PMTDistribution*)p);
   }
   static void deleteArray_darkartcLcLodcLcLClustercLcLPMTDistribution(void *p) {
      delete [] ((::darkart::od::Cluster::PMTDistribution*)p);
   }
   static void destruct_darkartcLcLodcLcLClustercLcLPMTDistribution(void *p) {
      typedef ::darkart::od::Cluster::PMTDistribution current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::Cluster::PMTDistribution

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLROI_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::ROI.
      typedef ::ROOTShadow::Shadow::darkart::od::ROI ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ROI*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_vec", (void*)&sobj->id_vec);
      R__insp.InspectMember("vector<int>", (void*)&sobj->id_vec, "id_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge_vec", (void*)&sobj->charge_vec);
      R__insp.InspectMember("vector<float>", (void*)&sobj->charge_vec, "charge_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "max_multiplicity_vec", (void*)&sobj->max_multiplicity_vec);
      R__insp.InspectMember("vector<int>", (void*)&sobj->max_multiplicity_vec, "max_multiplicity_vec.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLROI(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ROI : new ::darkart::od::ROI;
   }
   static void *newArray_darkartcLcLodcLcLROI(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ROI[nElements] : new ::darkart::od::ROI[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLROI(void *p) {
      delete ((::darkart::od::ROI*)p);
   }
   static void deleteArray_darkartcLcLodcLcLROI(void *p) {
      delete [] ((::darkart::od::ROI*)p);
   }
   static void destruct_darkartcLcLodcLcLROI(void *p) {
      typedef ::darkart::od::ROI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::ROI

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLSlider_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::Slider.
      typedef ::ROOTShadow::Shadow::darkart::od::Slider ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::Slider*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_vec", (void*)&sobj->id_vec);
      R__insp.InspectMember("vector<int>", (void*)&sobj->id_vec, "id_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge_vec", (void*)&sobj->charge_vec);
      R__insp.InspectMember("vector<float>", (void*)&sobj->charge_vec, "charge_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_ns_vec", (void*)&sobj->time_ns_vec);
      R__insp.InspectMember("vector<float>", (void*)&sobj->time_ns_vec, "time_ns_vec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "max_multiplicity_vec", (void*)&sobj->max_multiplicity_vec);
      R__insp.InspectMember("vector<int>", (void*)&sobj->max_multiplicity_vec, "max_multiplicity_vec.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLSlider(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::Slider : new ::darkart::od::Slider;
   }
   static void *newArray_darkartcLcLodcLcLSlider(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::Slider[nElements] : new ::darkart::od::Slider[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLSlider(void *p) {
      delete ((::darkart::od::Slider*)p);
   }
   static void deleteArray_darkartcLcLodcLcLSlider(void *p) {
      delete [] ((::darkart::od::Slider*)p);
   }
   static void destruct_darkartcLcLodcLcLSlider(void *p) {
      typedef ::darkart::od::Slider current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::Slider

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLTotalCharge_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::TotalCharge.
      typedef ::ROOTShadow::Shadow::darkart::od::TotalCharge ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::TotalCharge*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lsv_total_charge", &sobj->lsv_total_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wt_total_charge", &sobj->wt_total_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chan_charge_vec", (void*)&sobj->chan_charge_vec);
      R__insp.InspectMember("vector<float>", (void*)&sobj->chan_charge_vec, "chan_charge_vec.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLTotalCharge(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::TotalCharge : new ::darkart::od::TotalCharge;
   }
   static void *newArray_darkartcLcLodcLcLTotalCharge(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::TotalCharge[nElements] : new ::darkart::od::TotalCharge[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLTotalCharge(void *p) {
      delete ((::darkart::od::TotalCharge*)p);
   }
   static void deleteArray_darkartcLcLodcLcLTotalCharge(void *p) {
      delete [] ((::darkart::od::TotalCharge*)p);
   }
   static void destruct_darkartcLcLodcLcLTotalCharge(void *p) {
      typedef ::darkart::od::TotalCharge current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::TotalCharge

//______________________________________________________________________________
namespace ROOTDict {
   void darkartcLcLodcLcLODEventData_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class darkart::od::ODEventData.
      typedef ::ROOTShadow::Shadow::darkart::od::ODEventData ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::darkart::od::ODEventData*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "darkart_version", (void*)&sobj->darkart_version);
      R__insp.InspectMember("string", (void*)&sobj->darkart_version, "darkart_version.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_info", (void*)&sobj->event_info);
      R__insp.InspectMember("darkart::od::ODEventInfo", (void*)&sobj->event_info, "event_info.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel_data", (void*)&sobj->channel_data);
      R__insp.InspectMember("vector<darkart::od::ChannelData>", (void*)&sobj->channel_data, "channel_data.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nclusters_lsv", &sobj->nclusters_lsv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nclusters_wt", &sobj->nclusters_wt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusters_lsv", (void*)&sobj->clusters_lsv);
      R__insp.InspectMember("vector<darkart::od::Cluster>", (void*)&sobj->clusters_lsv, "clusters_lsv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusters_wt", (void*)&sobj->clusters_wt);
      R__insp.InspectMember("vector<darkart::od::Cluster>", (void*)&sobj->clusters_wt, "clusters_wt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "roi_lsv", (void*)&sobj->roi_lsv);
      R__insp.InspectMember("darkart::od::ROI", (void*)&sobj->roi_lsv, "roi_lsv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "roi_wt", (void*)&sobj->roi_wt);
      R__insp.InspectMember("darkart::od::ROI", (void*)&sobj->roi_wt, "roi_wt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slider_lsv", (void*)&sobj->slider_lsv);
      R__insp.InspectMember("darkart::od::Slider", (void*)&sobj->slider_lsv, "slider_lsv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slider_wt", (void*)&sobj->slider_wt);
      R__insp.InspectMember("darkart::od::Slider", (void*)&sobj->slider_wt, "slider_wt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "total_charge", (void*)&sobj->total_charge);
      R__insp.InspectMember("darkart::od::TotalCharge", (void*)&sobj->total_charge, "total_charge.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_darkartcLcLodcLcLODEventData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ODEventData : new ::darkart::od::ODEventData;
   }
   static void *newArray_darkartcLcLodcLcLODEventData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::darkart::od::ODEventData[nElements] : new ::darkart::od::ODEventData[nElements];
   }
   // Wrapper around operator delete
   static void delete_darkartcLcLodcLcLODEventData(void *p) {
      delete ((::darkart::od::ODEventData*)p);
   }
   static void deleteArray_darkartcLcLodcLcLODEventData(void *p) {
      delete [] ((::darkart::od::ODEventData*)p);
   }
   static void destruct_darkartcLcLodcLcLODEventData(void *p) {
      typedef ::darkart::od::ODEventData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::darkart::od::ODEventData

namespace ROOTDict {
   void vectorlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEboolgR_Dictionary();
   static void *new_vectorlEboolgR(void *p = 0);
   static void *newArray_vectorlEboolgR(Long_t size, void *p);
   static void delete_vectorlEboolgR(void *p);
   static void deleteArray_vectorlEboolgR(void *p);
   static void destruct_vectorlEboolgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<bool>*)
   {
      vector<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<bool>", -2, "vectorbool.dll", 0,
                  typeid(vector<bool>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEboolgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<bool>) );
      instance.SetNew(&new_vectorlEboolgR);
      instance.SetNewArray(&newArray_vectorlEboolgR);
      instance.SetDelete(&delete_vectorlEboolgR);
      instance.SetDeleteArray(&deleteArray_vectorlEboolgR);
      instance.SetDestructor(&destruct_vectorlEboolgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEboolgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool> : new vector<bool>;
   }
   static void *newArray_vectorlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool>[nElements] : new vector<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEboolgR(void *p) {
      delete ((vector<bool>*)p);
   }
   static void deleteArray_vectorlEboolgR(void *p) {
      delete [] ((vector<bool>*)p);
   }
   static void destruct_vectorlEboolgR(void *p) {
      typedef vector<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<bool>

namespace ROOTDict {
   void vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR_Dictionary();
   static void *new_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(void *p = 0);
   static void *newArray_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(Long_t size, void *p);
   static void delete_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(void *p);
   static void deleteArray_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(void *p);
   static void destruct_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<darkart::od::ChannelData::Pulse>*)
   {
      vector<darkart::od::ChannelData::Pulse> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<darkart::od::ChannelData::Pulse>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<darkart::od::ChannelData::Pulse>", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<darkart::od::ChannelData::Pulse>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<darkart::od::ChannelData::Pulse>) );
      instance.SetNew(&new_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR);
      instance.SetNewArray(&newArray_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR);
      instance.SetDelete(&delete_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR);
      instance.SetDestructor(&destruct_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<darkart::od::ChannelData::Pulse> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<darkart::od::ChannelData::Pulse>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<darkart::od::ChannelData::Pulse>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::ChannelData::Pulse> : new vector<darkart::od::ChannelData::Pulse>;
   }
   static void *newArray_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::ChannelData::Pulse>[nElements] : new vector<darkart::od::ChannelData::Pulse>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(void *p) {
      delete ((vector<darkart::od::ChannelData::Pulse>*)p);
   }
   static void deleteArray_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(void *p) {
      delete [] ((vector<darkart::od::ChannelData::Pulse>*)p);
   }
   static void destruct_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsegR(void *p) {
      typedef vector<darkart::od::ChannelData::Pulse> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<darkart::od::ChannelData::Pulse>

namespace ROOTDict {
   void vectorlEdarkartcLcLodcLcLChannelDatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdarkartcLcLodcLcLChannelDatagR_Dictionary();
   static void *new_vectorlEdarkartcLcLodcLcLChannelDatagR(void *p = 0);
   static void *newArray_vectorlEdarkartcLcLodcLcLChannelDatagR(Long_t size, void *p);
   static void delete_vectorlEdarkartcLcLodcLcLChannelDatagR(void *p);
   static void deleteArray_vectorlEdarkartcLcLodcLcLChannelDatagR(void *p);
   static void destruct_vectorlEdarkartcLcLodcLcLChannelDatagR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<darkart::od::ChannelData>*)
   {
      vector<darkart::od::ChannelData> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<darkart::od::ChannelData>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<darkart::od::ChannelData>", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<darkart::od::ChannelData>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdarkartcLcLodcLcLChannelDatagR_Dictionary, isa_proxy, 0,
                  sizeof(vector<darkart::od::ChannelData>) );
      instance.SetNew(&new_vectorlEdarkartcLcLodcLcLChannelDatagR);
      instance.SetNewArray(&newArray_vectorlEdarkartcLcLodcLcLChannelDatagR);
      instance.SetDelete(&delete_vectorlEdarkartcLcLodcLcLChannelDatagR);
      instance.SetDeleteArray(&deleteArray_vectorlEdarkartcLcLodcLcLChannelDatagR);
      instance.SetDestructor(&destruct_vectorlEdarkartcLcLodcLcLChannelDatagR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<darkart::od::ChannelData> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<darkart::od::ChannelData>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdarkartcLcLodcLcLChannelDatagR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<darkart::od::ChannelData>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdarkartcLcLodcLcLChannelDatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::ChannelData> : new vector<darkart::od::ChannelData>;
   }
   static void *newArray_vectorlEdarkartcLcLodcLcLChannelDatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::ChannelData>[nElements] : new vector<darkart::od::ChannelData>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdarkartcLcLodcLcLChannelDatagR(void *p) {
      delete ((vector<darkart::od::ChannelData>*)p);
   }
   static void deleteArray_vectorlEdarkartcLcLodcLcLChannelDatagR(void *p) {
      delete [] ((vector<darkart::od::ChannelData>*)p);
   }
   static void destruct_vectorlEdarkartcLcLodcLcLChannelDatagR(void *p) {
      typedef vector<darkart::od::ChannelData> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<darkart::od::ChannelData>

namespace ROOTDict {
   void vectorlEdarkartcLcLodcLcLClustergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdarkartcLcLodcLcLClustergR_Dictionary();
   static void *new_vectorlEdarkartcLcLodcLcLClustergR(void *p = 0);
   static void *newArray_vectorlEdarkartcLcLodcLcLClustergR(Long_t size, void *p);
   static void delete_vectorlEdarkartcLcLodcLcLClustergR(void *p);
   static void deleteArray_vectorlEdarkartcLcLodcLcLClustergR(void *p);
   static void destruct_vectorlEdarkartcLcLodcLcLClustergR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<darkart::od::Cluster>*)
   {
      vector<darkart::od::Cluster> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<darkart::od::Cluster>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<darkart::od::Cluster>", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<darkart::od::Cluster>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdarkartcLcLodcLcLClustergR_Dictionary, isa_proxy, 0,
                  sizeof(vector<darkart::od::Cluster>) );
      instance.SetNew(&new_vectorlEdarkartcLcLodcLcLClustergR);
      instance.SetNewArray(&newArray_vectorlEdarkartcLcLodcLcLClustergR);
      instance.SetDelete(&delete_vectorlEdarkartcLcLodcLcLClustergR);
      instance.SetDeleteArray(&deleteArray_vectorlEdarkartcLcLodcLcLClustergR);
      instance.SetDestructor(&destruct_vectorlEdarkartcLcLodcLcLClustergR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<darkart::od::Cluster> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<darkart::od::Cluster>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdarkartcLcLodcLcLClustergR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<darkart::od::Cluster>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdarkartcLcLodcLcLClustergR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::Cluster> : new vector<darkart::od::Cluster>;
   }
   static void *newArray_vectorlEdarkartcLcLodcLcLClustergR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::Cluster>[nElements] : new vector<darkart::od::Cluster>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdarkartcLcLodcLcLClustergR(void *p) {
      delete ((vector<darkart::od::Cluster>*)p);
   }
   static void deleteArray_vectorlEdarkartcLcLodcLcLClustergR(void *p) {
      delete [] ((vector<darkart::od::Cluster>*)p);
   }
   static void destruct_vectorlEdarkartcLcLodcLcLClustergR(void *p) {
      typedef vector<darkart::od::Cluster> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<darkart::od::Cluster>

namespace ROOTDict {
   void vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR_Dictionary();
   static void *new_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(void *p = 0);
   static void *newArray_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(Long_t size, void *p);
   static void delete_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(void *p);
   static void deleteArray_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(void *p);
   static void destruct_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<darkart::od::RunInfo::ChConfData>*)
   {
      vector<darkart::od::RunInfo::ChConfData> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<darkart::od::RunInfo::ChConfData>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<darkart::od::RunInfo::ChConfData>", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<darkart::od::RunInfo::ChConfData>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR_Dictionary, isa_proxy, 0,
                  sizeof(vector<darkart::od::RunInfo::ChConfData>) );
      instance.SetNew(&new_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR);
      instance.SetNewArray(&newArray_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR);
      instance.SetDelete(&delete_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR);
      instance.SetDeleteArray(&deleteArray_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR);
      instance.SetDestructor(&destruct_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<darkart::od::RunInfo::ChConfData> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<darkart::od::RunInfo::ChConfData>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<darkart::od::RunInfo::ChConfData>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::RunInfo::ChConfData> : new vector<darkart::od::RunInfo::ChConfData>;
   }
   static void *newArray_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::RunInfo::ChConfData>[nElements] : new vector<darkart::od::RunInfo::ChConfData>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(void *p) {
      delete ((vector<darkart::od::RunInfo::ChConfData>*)p);
   }
   static void deleteArray_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(void *p) {
      delete [] ((vector<darkart::od::RunInfo::ChConfData>*)p);
   }
   static void destruct_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagR(void *p) {
      typedef vector<darkart::od::RunInfo::ChConfData> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<darkart::od::RunInfo::ChConfData>

namespace ROOTDict {
   void vectorlEdarkartcLcLodcLcLSumWFSamplegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdarkartcLcLodcLcLSumWFSamplegR_Dictionary();
   static void *new_vectorlEdarkartcLcLodcLcLSumWFSamplegR(void *p = 0);
   static void *newArray_vectorlEdarkartcLcLodcLcLSumWFSamplegR(Long_t size, void *p);
   static void delete_vectorlEdarkartcLcLodcLcLSumWFSamplegR(void *p);
   static void deleteArray_vectorlEdarkartcLcLodcLcLSumWFSamplegR(void *p);
   static void destruct_vectorlEdarkartcLcLodcLcLSumWFSamplegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<darkart::od::SumWFSample>*)
   {
      vector<darkart::od::SumWFSample> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<darkart::od::SumWFSample>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<darkart::od::SumWFSample>", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<darkart::od::SumWFSample>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdarkartcLcLodcLcLSumWFSamplegR_Dictionary, isa_proxy, 4,
                  sizeof(vector<darkart::od::SumWFSample>) );
      instance.SetNew(&new_vectorlEdarkartcLcLodcLcLSumWFSamplegR);
      instance.SetNewArray(&newArray_vectorlEdarkartcLcLodcLcLSumWFSamplegR);
      instance.SetDelete(&delete_vectorlEdarkartcLcLodcLcLSumWFSamplegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdarkartcLcLodcLcLSumWFSamplegR);
      instance.SetDestructor(&destruct_vectorlEdarkartcLcLodcLcLSumWFSamplegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<darkart::od::SumWFSample> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<darkart::od::SumWFSample>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdarkartcLcLodcLcLSumWFSamplegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<darkart::od::SumWFSample>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdarkartcLcLodcLcLSumWFSamplegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::SumWFSample> : new vector<darkart::od::SumWFSample>;
   }
   static void *newArray_vectorlEdarkartcLcLodcLcLSumWFSamplegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<darkart::od::SumWFSample>[nElements] : new vector<darkart::od::SumWFSample>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdarkartcLcLodcLcLSumWFSamplegR(void *p) {
      delete ((vector<darkart::od::SumWFSample>*)p);
   }
   static void deleteArray_vectorlEdarkartcLcLodcLcLSumWFSamplegR(void *p) {
      delete [] ((vector<darkart::od::SumWFSample>*)p);
   }
   static void destruct_vectorlEdarkartcLcLodcLcLSumWFSamplegR(void *p) {
      typedef vector<darkart::od::SumWFSample> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<darkart::od::SumWFSample>

namespace ROOTDict {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<double>

namespace ROOTDict {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<float>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

namespace ROOTDict {
   void vectorlEpairlEintcOintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpairlEintcOintgRsPgR_Dictionary();
   static void *new_vectorlEpairlEintcOintgRsPgR(void *p = 0);
   static void *newArray_vectorlEpairlEintcOintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEpairlEintcOintgRsPgR(void *p);
   static void deleteArray_vectorlEpairlEintcOintgRsPgR(void *p);
   static void destruct_vectorlEpairlEintcOintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<pair<int,int> >*)
   {
      vector<pair<int,int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pair<int,int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pair<int,int> >", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<pair<int,int> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEpairlEintcOintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<pair<int,int> >) );
      instance.SetNew(&new_vectorlEpairlEintcOintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEpairlEintcOintgRsPgR);
      instance.SetDelete(&delete_vectorlEpairlEintcOintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpairlEintcOintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEpairlEintcOintgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<pair<int,int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pair<int,int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpairlEintcOintgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<pair<int,int> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEpairlEintcOintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<int,int> > : new vector<pair<int,int> >;
   }
   static void *newArray_vectorlEpairlEintcOintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<int,int> >[nElements] : new vector<pair<int,int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpairlEintcOintgRsPgR(void *p) {
      delete ((vector<pair<int,int> >*)p);
   }
   static void deleteArray_vectorlEpairlEintcOintgRsPgR(void *p) {
      delete [] ((vector<pair<int,int> >*)p);
   }
   static void destruct_vectorlEpairlEintcOintgRsPgR(void *p) {
      typedef vector<pair<int,int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<pair<int,int> >

namespace ROOTDict {
   void vectorlEvectorlEboolgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEboolgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEboolgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEboolgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEboolgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEboolgRsPgR(void *p);
   static void destruct_vectorlEvectorlEboolgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<bool> >*)
   {
      vector<vector<bool> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<bool> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<bool> >", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<bool> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEboolgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<vector<bool> >) );
      instance.SetNew(&new_vectorlEvectorlEboolgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEboolgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEboolgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEboolgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEboolgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<bool> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<bool> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEboolgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<bool> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEboolgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<bool> > : new vector<vector<bool> >;
   }
   static void *newArray_vectorlEvectorlEboolgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<bool> >[nElements] : new vector<vector<bool> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEboolgRsPgR(void *p) {
      delete ((vector<vector<bool> >*)p);
   }
   static void deleteArray_vectorlEvectorlEboolgRsPgR(void *p) {
      delete [] ((vector<vector<bool> >*)p);
   }
   static void destruct_vectorlEvectorlEboolgRsPgR(void *p) {
      typedef vector<vector<bool> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<bool> >

namespace ROOTDict {
   void vectorlEvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEdoublegRsPgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double> >*)
   {
      vector<vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double> >", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<double> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<vector<double> >) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> > : new vector<vector<double> >;
   }
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> >[nElements] : new vector<vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete ((vector<vector<double> >*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete [] ((vector<vector<double> >*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p) {
      typedef vector<vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<double> >

namespace ROOTDict {
   void vectorlEvectorlEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEfloatgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEfloatgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEfloatgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEfloatgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEfloatgRsPgR(void *p);
   static void destruct_vectorlEvectorlEfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<float> >*)
   {
      vector<vector<float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<float> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<float> >", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<float> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEfloatgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<vector<float> >) );
      instance.SetNew(&new_vectorlEvectorlEfloatgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEfloatgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEfloatgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEfloatgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<float> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEfloatgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<float> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEfloatgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<float> > : new vector<vector<float> >;
   }
   static void *newArray_vectorlEvectorlEfloatgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<float> >[nElements] : new vector<vector<float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEfloatgRsPgR(void *p) {
      delete ((vector<vector<float> >*)p);
   }
   static void deleteArray_vectorlEvectorlEfloatgRsPgR(void *p) {
      delete [] ((vector<vector<float> >*)p);
   }
   static void destruct_vectorlEvectorlEfloatgRsPgR(void *p) {
      typedef vector<vector<float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<float> >

namespace ROOTDict {
   void vectorlEvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEintgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEintgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEintgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p);
   static void destruct_vectorlEvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<int> >*)
   {
      vector<vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<int> >", -2, "/ds50/app/products/root/v5_34_25/Linux64bit+2.6-2.12-e6-prof/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<int> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEintgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<vector<int> >) );
      instance.SetNew(&new_vectorlEvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEintgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEintgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> > : new vector<vector<int> >;
   }
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> >[nElements] : new vector<vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEintgRsPgR(void *p) {
      delete ((vector<vector<int> >*)p);
   }
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p) {
      delete [] ((vector<vector<int> >*)p);
   }
   static void destruct_vectorlEvectorlEintgRsPgR(void *p) {
      typedef vector<vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<int> >

/********************************************************
* SLADOD_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSLADOD_Dict();

extern "C" void G__set_cpp_environmentSLADOD_Dict() {
  G__cpp_reset_tagtableSLADOD_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevSLADOD_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* darkart::od::ODEventInfo */
static int G__SLADOD_Dict_645_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ODEventInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ODEventInfo[n];
     } else {
       p = new((void*) gvp) darkart::od::ODEventInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ODEventInfo;
     } else {
       p = new((void*) gvp) darkart::od::ODEventInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_645_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const darkart::od::ODEventInfo*) G__getstructoffset())->makeGPSTimestamp((const uint16_t) G__int(libp->para[0]), (const uint32_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_645_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::ODEventInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::ODEventInfo(*(darkart::od::ODEventInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::ODEventInfo G__TdarkartcLcLodcLcLODEventInfo;
static int G__SLADOD_Dict_645_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::ODEventInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::ODEventInfo*) (soff+(sizeof(darkart::od::ODEventInfo)*i)))->~G__TdarkartcLcLodcLcLODEventInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::ODEventInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::ODEventInfo*) (soff))->~G__TdarkartcLcLodcLcLODEventInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_645_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ODEventInfo* dest = (darkart::od::ODEventInfo*) G__getstructoffset();
   *dest = *(darkart::od::ODEventInfo*) libp->para[0].ref;
   const darkart::od::ODEventInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::ROICfg */
static int G__SLADOD_Dict_646_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ROICfg* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ROICfg[n];
     } else {
       p = new((void*) gvp) darkart::od::ROICfg[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ROICfg;
     } else {
       p = new((void*) gvp) darkart::od::ROICfg;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_646_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::ROICfg* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::ROICfg(*(darkart::od::ROICfg*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::ROICfg G__TdarkartcLcLodcLcLROICfg;
static int G__SLADOD_Dict_646_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::ROICfg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::ROICfg*) (soff+(sizeof(darkart::od::ROICfg)*i)))->~G__TdarkartcLcLodcLcLROICfg();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::ROICfg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::ROICfg*) (soff))->~G__TdarkartcLcLodcLcLROICfg();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_646_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ROICfg* dest = (darkart::od::ROICfg*) G__getstructoffset();
   *dest = *(darkart::od::ROICfg*) libp->para[0].ref;
   const darkart::od::ROICfg& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::SliderCfg */
static int G__SLADOD_Dict_651_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::SliderCfg* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::SliderCfg[n];
     } else {
       p = new((void*) gvp) darkart::od::SliderCfg[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::SliderCfg;
     } else {
       p = new((void*) gvp) darkart::od::SliderCfg;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_651_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::SliderCfg* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::SliderCfg(*(darkart::od::SliderCfg*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::SliderCfg G__TdarkartcLcLodcLcLSliderCfg;
static int G__SLADOD_Dict_651_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::SliderCfg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::SliderCfg*) (soff+(sizeof(darkart::od::SliderCfg)*i)))->~G__TdarkartcLcLodcLcLSliderCfg();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::SliderCfg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::SliderCfg*) (soff))->~G__TdarkartcLcLodcLcLSliderCfg();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_651_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::SliderCfg* dest = (darkart::od::SliderCfg*) G__getstructoffset();
   *dest = *(darkart::od::SliderCfg*) libp->para[0].ref;
   const darkart::od::SliderCfg& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::RunInfo */
static int G__SLADOD_Dict_652_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::RunInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::RunInfo[n];
     } else {
       p = new((void*) gvp) darkart::od::RunInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::RunInfo;
     } else {
       p = new((void*) gvp) darkart::od::RunInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_652_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((darkart::od::RunInfo*) G__getstructoffset())->sampleTonsLSV((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_652_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((darkart::od::RunInfo*) G__getstructoffset())->sampleTonsWT((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_652_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::RunInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::RunInfo(*(darkart::od::RunInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::RunInfo G__TdarkartcLcLodcLcLRunInfo;
static int G__SLADOD_Dict_652_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::RunInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::RunInfo*) (soff+(sizeof(darkart::od::RunInfo)*i)))->~G__TdarkartcLcLodcLcLRunInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::RunInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::RunInfo*) (soff))->~G__TdarkartcLcLodcLcLRunInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_652_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::RunInfo* dest = (darkart::od::RunInfo*) G__getstructoffset();
   *dest = *(darkart::od::RunInfo*) libp->para[0].ref;
   const darkart::od::RunInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::RunInfo::ChConfData */
static int G__SLADOD_Dict_653_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::RunInfo::ChConfData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::RunInfo::ChConfData[n];
     } else {
       p = new((void*) gvp) darkart::od::RunInfo::ChConfData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::RunInfo::ChConfData;
     } else {
       p = new((void*) gvp) darkart::od::RunInfo::ChConfData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_653_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::RunInfo::ChConfData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::RunInfo::ChConfData(*(darkart::od::RunInfo::ChConfData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::RunInfo::ChConfData G__TdarkartcLcLodcLcLRunInfocLcLChConfData;
static int G__SLADOD_Dict_653_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::RunInfo::ChConfData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::RunInfo::ChConfData*) (soff+(sizeof(darkart::od::RunInfo::ChConfData)*i)))->~G__TdarkartcLcLodcLcLRunInfocLcLChConfData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::RunInfo::ChConfData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::RunInfo::ChConfData*) (soff))->~G__TdarkartcLcLodcLcLRunInfocLcLChConfData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_653_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::RunInfo::ChConfData* dest = (darkart::od::RunInfo::ChConfData*) G__getstructoffset();
   *dest = *(darkart::od::RunInfo::ChConfData*) libp->para[0].ref;
   const darkart::od::RunInfo::ChConfData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::RunInfo::DetectorCfg */
static int G__SLADOD_Dict_654_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::RunInfo::DetectorCfg* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::RunInfo::DetectorCfg[n];
     } else {
       p = new((void*) gvp) darkart::od::RunInfo::DetectorCfg[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::RunInfo::DetectorCfg;
     } else {
       p = new((void*) gvp) darkart::od::RunInfo::DetectorCfg;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_654_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::RunInfo::DetectorCfg* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::RunInfo::DetectorCfg(*(darkart::od::RunInfo::DetectorCfg*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::RunInfo::DetectorCfg G__TdarkartcLcLodcLcLRunInfocLcLDetectorCfg;
static int G__SLADOD_Dict_654_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::RunInfo::DetectorCfg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::RunInfo::DetectorCfg*) (soff+(sizeof(darkart::od::RunInfo::DetectorCfg)*i)))->~G__TdarkartcLcLodcLcLRunInfocLcLDetectorCfg();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::RunInfo::DetectorCfg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::RunInfo::DetectorCfg*) (soff))->~G__TdarkartcLcLodcLcLRunInfocLcLDetectorCfg();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_654_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::RunInfo::DetectorCfg* dest = (darkart::od::RunInfo::DetectorCfg*) G__getstructoffset();
   *dest = *(darkart::od::RunInfo::DetectorCfg*) libp->para[0].ref;
   const darkart::od::RunInfo::DetectorCfg& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::ChannelData */
static int G__SLADOD_Dict_681_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ChannelData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ChannelData[n];
     } else {
       p = new((void*) gvp) darkart::od::ChannelData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ChannelData;
     } else {
       p = new((void*) gvp) darkart::od::ChannelData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_681_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = darkart::od::ChannelData::PrintVarNames();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_681_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((darkart::od::ChannelData*) G__getstructoffset())->PrintVarContent();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_681_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::ChannelData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::ChannelData(*(darkart::od::ChannelData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::ChannelData G__TdarkartcLcLodcLcLChannelData;
static int G__SLADOD_Dict_681_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::ChannelData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::ChannelData*) (soff+(sizeof(darkart::od::ChannelData)*i)))->~G__TdarkartcLcLodcLcLChannelData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::ChannelData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::ChannelData*) (soff))->~G__TdarkartcLcLodcLcLChannelData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_681_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ChannelData* dest = (darkart::od::ChannelData*) G__getstructoffset();
   *dest = *(darkart::od::ChannelData*) libp->para[0].ref;
   const darkart::od::ChannelData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::ChannelData::Pulse */
static int G__SLADOD_Dict_686_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ChannelData::Pulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ChannelData::Pulse[n];
     } else {
       p = new((void*) gvp) darkart::od::ChannelData::Pulse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ChannelData::Pulse;
     } else {
       p = new((void*) gvp) darkart::od::ChannelData::Pulse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_686_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = darkart::od::ChannelData::Pulse::PrintVarNames();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_686_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((darkart::od::ChannelData::Pulse*) G__getstructoffset())->PrintVarContent();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_686_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::ChannelData::Pulse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::ChannelData::Pulse(*(darkart::od::ChannelData::Pulse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::ChannelData::Pulse G__TdarkartcLcLodcLcLChannelDatacLcLPulse;
static int G__SLADOD_Dict_686_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::ChannelData::Pulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::ChannelData::Pulse*) (soff+(sizeof(darkart::od::ChannelData::Pulse)*i)))->~G__TdarkartcLcLodcLcLChannelDatacLcLPulse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::ChannelData::Pulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::ChannelData::Pulse*) (soff))->~G__TdarkartcLcLodcLcLChannelDatacLcLPulse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_686_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ChannelData::Pulse* dest = (darkart::od::ChannelData::Pulse*) G__getstructoffset();
   *dest = *(darkart::od::ChannelData::Pulse*) libp->para[0].ref;
   const darkart::od::ChannelData::Pulse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> > */
static int G__SLADOD_Dict_693_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reference obj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->at((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_reference obj = ((const vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->at((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator* pobj;
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator xobj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->begin();
         pobj = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator* pobj;
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator xobj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->end();
         pobj = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reverse_iterator* pobj;
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reverse_iterator xobj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->rbegin();
         pobj = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reverse_iterator* pobj;
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reverse_iterator xobj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->rend();
         pobj = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->resize((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->resize((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]), *((darkart::od::SumWFSample*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reference obj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->operator[]((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_reference obj = ((const vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->operator[]((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >[n];
     } else {
       p = new((void*) gvp) vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >;
     } else {
       p = new((void*) gvp) vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]), *(darkart::od::SumWFSample*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]), *(darkart::od::SumWFSample*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >(*(vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >(*(vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >(*((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator*) G__int(libp->para[0])), *((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >(*((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator*) G__int(libp->para[0])), *((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >& obj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->operator=(*(vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->reserve((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const darkart::od::SumWFSample& obj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const darkart::od::SumWFSample& obj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->push_back(*(darkart::od::SumWFSample*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->swap(*(vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator* pobj;
         vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator xobj = ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->insert(*((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator*) G__int(libp->para[0])), *(darkart::od::SumWFSample*) libp->para[1].ref);
         pobj = new vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->insert(*((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator*) G__int(libp->para[0])), *((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator*) G__int(libp->para[1]))
, *((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->insert(*((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator*) G__int(libp->para[0])), (vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type) G__int(libp->para[1])
, *(darkart::od::SumWFSample*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->erase(*((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->erase(*((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator*) G__int(libp->para[0])), *((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_693_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> > G__TvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR;
static int G__SLADOD_Dict_693_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) (soff+(sizeof(vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >)*i)))->~G__TvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*) (soff))->~G__TvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::Cluster */
static int G__SLADOD_Dict_700_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::Cluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::Cluster[n];
     } else {
       p = new((void*) gvp) darkart::od::Cluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::Cluster;
     } else {
       p = new((void*) gvp) darkart::od::Cluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_700_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::Cluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::Cluster(*(darkart::od::Cluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::Cluster G__TdarkartcLcLodcLcLCluster;
static int G__SLADOD_Dict_700_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::Cluster*) (soff+(sizeof(darkart::od::Cluster)*i)))->~G__TdarkartcLcLodcLcLCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::Cluster*) (soff))->~G__TdarkartcLcLodcLcLCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_700_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::Cluster* dest = (darkart::od::Cluster*) G__getstructoffset();
   *dest = *(darkart::od::Cluster*) libp->para[0].ref;
   const darkart::od::Cluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::Cluster::Shape */
// automatic default constructor
static int G__SLADOD_Dict_705_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::Cluster::Shape *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::Cluster::Shape[n];
     } else {
       p = new((void*) gvp) darkart::od::Cluster::Shape[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::Cluster::Shape;
     } else {
       p = new((void*) gvp) darkart::od::Cluster::Shape;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_705_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::Cluster::Shape* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::Cluster::Shape(*(darkart::od::Cluster::Shape*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::Cluster::Shape G__TdarkartcLcLodcLcLClustercLcLShape;
static int G__SLADOD_Dict_705_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::Cluster::Shape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::Cluster::Shape*) (soff+(sizeof(darkart::od::Cluster::Shape)*i)))->~G__TdarkartcLcLodcLcLClustercLcLShape();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::Cluster::Shape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::Cluster::Shape*) (soff))->~G__TdarkartcLcLodcLcLClustercLcLShape();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_705_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::Cluster::Shape* dest = (darkart::od::Cluster::Shape*) G__getstructoffset();
   *dest = *(darkart::od::Cluster::Shape*) libp->para[0].ref;
   const darkart::od::Cluster::Shape& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::Cluster::PMTDistribution */
// automatic default constructor
static int G__SLADOD_Dict_706_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::Cluster::PMTDistribution *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::Cluster::PMTDistribution[n];
     } else {
       p = new((void*) gvp) darkart::od::Cluster::PMTDistribution[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::Cluster::PMTDistribution;
     } else {
       p = new((void*) gvp) darkart::od::Cluster::PMTDistribution;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_706_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::Cluster::PMTDistribution* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::Cluster::PMTDistribution(*(darkart::od::Cluster::PMTDistribution*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::Cluster::PMTDistribution G__TdarkartcLcLodcLcLClustercLcLPMTDistribution;
static int G__SLADOD_Dict_706_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::Cluster::PMTDistribution*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::Cluster::PMTDistribution*) (soff+(sizeof(darkart::od::Cluster::PMTDistribution)*i)))->~G__TdarkartcLcLodcLcLClustercLcLPMTDistribution();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::Cluster::PMTDistribution*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::Cluster::PMTDistribution*) (soff))->~G__TdarkartcLcLodcLcLClustercLcLPMTDistribution();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_706_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::Cluster::PMTDistribution* dest = (darkart::od::Cluster::PMTDistribution*) G__getstructoffset();
   *dest = *(darkart::od::Cluster::PMTDistribution*) libp->para[0].ref;
   const darkart::od::Cluster::PMTDistribution& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::ROI */
static int G__SLADOD_Dict_707_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ROI* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ROI[n];
     } else {
       p = new((void*) gvp) darkart::od::ROI[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ROI;
     } else {
       p = new((void*) gvp) darkart::od::ROI;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_707_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::ROI* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::ROI(*(darkart::od::ROI*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::ROI G__TdarkartcLcLodcLcLROI;
static int G__SLADOD_Dict_707_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::ROI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::ROI*) (soff+(sizeof(darkart::od::ROI)*i)))->~G__TdarkartcLcLodcLcLROI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::ROI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::ROI*) (soff))->~G__TdarkartcLcLodcLcLROI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_707_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ROI* dest = (darkart::od::ROI*) G__getstructoffset();
   *dest = *(darkart::od::ROI*) libp->para[0].ref;
   const darkart::od::ROI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::Slider */
static int G__SLADOD_Dict_708_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::Slider* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::Slider[n];
     } else {
       p = new((void*) gvp) darkart::od::Slider[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::Slider;
     } else {
       p = new((void*) gvp) darkart::od::Slider;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_708_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::Slider* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::Slider(*(darkart::od::Slider*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::Slider G__TdarkartcLcLodcLcLSlider;
static int G__SLADOD_Dict_708_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::Slider*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::Slider*) (soff+(sizeof(darkart::od::Slider)*i)))->~G__TdarkartcLcLodcLcLSlider();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::Slider*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::Slider*) (soff))->~G__TdarkartcLcLodcLcLSlider();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_708_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::Slider* dest = (darkart::od::Slider*) G__getstructoffset();
   *dest = *(darkart::od::Slider*) libp->para[0].ref;
   const darkart::od::Slider& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::TotalCharge */
static int G__SLADOD_Dict_709_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::TotalCharge* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::TotalCharge[n];
     } else {
       p = new((void*) gvp) darkart::od::TotalCharge[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::TotalCharge;
     } else {
       p = new((void*) gvp) darkart::od::TotalCharge;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_709_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::TotalCharge* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::TotalCharge(*(darkart::od::TotalCharge*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::TotalCharge G__TdarkartcLcLodcLcLTotalCharge;
static int G__SLADOD_Dict_709_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::TotalCharge*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::TotalCharge*) (soff+(sizeof(darkart::od::TotalCharge)*i)))->~G__TdarkartcLcLodcLcLTotalCharge();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::TotalCharge*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::TotalCharge*) (soff))->~G__TdarkartcLcLodcLcLTotalCharge();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_709_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::TotalCharge* dest = (darkart::od::TotalCharge*) G__getstructoffset();
   *dest = *(darkart::od::TotalCharge*) libp->para[0].ref;
   const darkart::od::TotalCharge& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* darkart::od::ODEventData */
static int G__SLADOD_Dict_710_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((darkart::od::ODEventData*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__SLADOD_Dict_710_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ODEventData *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ODEventData[n];
     } else {
       p = new((void*) gvp) darkart::od::ODEventData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new darkart::od::ODEventData;
     } else {
       p = new((void*) gvp) darkart::od::ODEventData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SLADOD_Dict_710_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   darkart::od::ODEventData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new darkart::od::ODEventData(*(darkart::od::ODEventData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef darkart::od::ODEventData G__TdarkartcLcLodcLcLODEventData;
static int G__SLADOD_Dict_710_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (darkart::od::ODEventData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((darkart::od::ODEventData*) (soff+(sizeof(darkart::od::ODEventData)*i)))->~G__TdarkartcLcLodcLcLODEventData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (darkart::od::ODEventData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((darkart::od::ODEventData*) (soff))->~G__TdarkartcLcLodcLcLODEventData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SLADOD_Dict_710_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   darkart::od::ODEventData* dest = (darkart::od::ODEventData*) G__getstructoffset();
   *dest = *(darkart::od::ODEventData*) libp->para[0].ref;
   const darkart::od::ODEventData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
static int G__SLADOD_Dict_712_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->at((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference obj = ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->at((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->resize((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->resize((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *((vector<int,allocator<int> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator[]((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference obj = ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator[]((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >;
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *(vector<int,allocator<int> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *(vector<int,allocator<int> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator=(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->reserve((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->push_back(*(vector<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->swap(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *(vector<int,allocator<int> >*) libp->para[1].ref);
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[1])
, *(vector<int,allocator<int> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->erase(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->erase(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_712_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR;
static int G__SLADOD_Dict_712_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) (soff+(sizeof(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >)*i)))->~G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) (soff))->~G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */
static int G__SLADOD_Dict_716_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->at((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference obj = ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->at((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->resize((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->resize((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]), *((vector<float,allocator<float> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->operator[]((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference obj = ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->operator[]((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >;
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]), *(vector<float,allocator<float> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]), *(vector<float,allocator<float> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >& obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->operator=(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->reserve((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float,allocator<float> >& obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float,allocator<float> >& obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->push_back(*(vector<float,allocator<float> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->swap(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->insert(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), *(vector<float,allocator<float> >*) libp->para[1].ref);
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->insert(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->insert(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), (vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[1])
, *(vector<float,allocator<float> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->erase(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->erase(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_716_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > G__TvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR;
static int G__SLADOD_Dict_716_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) (soff+(sizeof(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >)*i)))->~G__TvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) (soff))->~G__TvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
static int G__SLADOD_Dict_720_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->at((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference obj = ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->at((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->resize((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->resize((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *((vector<double,allocator<double> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator[]((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference obj = ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator[]((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >;
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *(vector<double,allocator<double> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *(vector<double,allocator<double> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator=(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->reserve((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->push_back(*(vector<double,allocator<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->swap(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *(vector<double,allocator<double> >*) libp->para[1].ref);
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[1])
, *(vector<double,allocator<double> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->erase(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->erase(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_720_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR;
static int G__SLADOD_Dict_720_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) (soff+(sizeof(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >)*i)))->~G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) (soff))->~G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > > */
static int G__SLADOD_Dict_724_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reference obj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->at((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_reference obj = ((const vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->at((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator* pobj;
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator xobj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator* pobj;
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator xobj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reverse_iterator* pobj;
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reverse_iterator xobj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reverse_iterator* pobj;
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reverse_iterator xobj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->resize((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->resize((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]), *((vector<bool,allocator<bool> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reference obj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->operator[]((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_reference obj = ((const vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->operator[]((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >;
     } else {
       p = new((void*) gvp) vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]), *(vector<bool,allocator<bool> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]), *(vector<bool,allocator<bool> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >(*(vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >(*(vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >(*((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >(*((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >& obj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->operator=(*(vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->reserve((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<bool,allocator<bool> >& obj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<bool,allocator<bool> >& obj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->push_back(*(vector<bool,allocator<bool> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->swap(*(vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator* pobj;
         vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator xobj = ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->insert(*((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator*) G__int(libp->para[0])), *(vector<bool,allocator<bool> >*) libp->para[1].ref);
         pobj = new vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->insert(*((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->insert(*((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator*) G__int(libp->para[0])), (vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type) G__int(libp->para[1])
, *(vector<bool,allocator<bool> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->erase(*((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->erase(*((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SLADOD_Dict_724_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > > G__TvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR;
static int G__SLADOD_Dict_724_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) (soff+(sizeof(vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >)*i)))->~G__TvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*) (soff))->~G__TvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* darkart::od::ODEventInfo */

/* darkart::od::ROICfg */

/* darkart::od::SliderCfg */

/* darkart::od::RunInfo */

/* darkart::od::RunInfo::ChConfData */

/* darkart::od::RunInfo::DetectorCfg */

/* darkart::od::ChannelData */

/* darkart::od::ChannelData::Pulse */

/* vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> > */

/* darkart::od::Cluster */

/* darkart::od::Cluster::Shape */

/* darkart::od::Cluster::PMTDistribution */

/* darkart::od::ROI */

/* darkart::od::Slider */

/* darkart::od::TotalCharge */

/* darkart::od::ODEventData */

/* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */

/* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */

/* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */

/* vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSLADOD_Dict {
 public:
  G__Sizep2memfuncSLADOD_Dict(): p(&G__Sizep2memfuncSLADOD_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSLADOD_Dict::*p)();
};

size_t G__get_sizep2memfuncSLADOD_Dict()
{
  G__Sizep2memfuncSLADOD_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSLADOD_Dict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSLADOD_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uint16_t",114,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uint32_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ChConfData>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<darkart::od::RunInfo::ChConfData>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ChannelData>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<darkart::od::ChannelData>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Pulse>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<darkart::od::ChannelData::Pulse>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pulses_t",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelData));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SumWFSample>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample),1,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample),257,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<darkart::od::SumWFSample>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ChPulsePair>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<int,int> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Cluster>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<darkart::od::Cluster>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<int> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),1,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),257,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<float> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<float> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),1,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),257,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<float,allocator<float> > >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<double> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),1,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),257,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<bool> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<bool> >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR),1,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR),257,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<bool,allocator<bool> > >",117,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* darkart::od::ODEventInfo */
static void G__setup_memvardarkartcLcLodcLcLODEventInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo));
   { darkart::od::ODEventInfo *p; p=(darkart::od::ODEventInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->run_id)-(long)(p)),105,0,0,-1,-1,-1,1,"run_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->subrun_id)-(long)(p)),105,0,0,-1,-1,-1,1,"subrun_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->event_id)-(long)(p)),105,0,0,-1,-1,-1,1,"event_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gps_coarse)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"gps_coarse=",0,"GPS Coarse Time counter");
   G__memvar_setup((void*)((long)(&p->gps_fine)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"gps_fine=",0,"GPS Fine Time counter. It counts the number of clock cycles (50 MHz) in the second ");
   G__memvar_setup((void*)((long)(&p->gps_pps)-(long)(p)),114,0,0,-1,G__defined_typename("uint16_t"),-1,1,"gps_pps=",0,"1PPS counter. It counts the number of seconds since the start of the run");
   G__memvar_setup((void*)((long)(&p->gps_timestamp_sec)-(long)(p)),100,0,0,-1,-1,-1,1,"gps_timestamp_sec=",0,"GPS timestamp in seconds of the event constructected using the 3 gps counters");
   G__memvar_setup((void*)((long)(&p->dt_usec)-(long)(p)),100,0,0,-1,-1,-1,1,"dt_usec=",0,"time since the last event in microsecond");
   G__memvar_setup((void*)((long)(&p->trigger_type)-(long)(p)),114,0,0,-1,G__defined_typename("uint16_t"),-1,1,"trigger_type=",0,"trigger types. Now it is empty      ");
   G__memvar_setup((void*)((long)(&p->bad_time_alignment)-(long)(p)),105,0,0,-1,-1,-1,1,"bad_time_alignment=",0,"0=good alignment, 1=time missmatch between digitizers");
   }
   G__tag_memvar_reset();
}


   /* darkart::od::ROICfg */
static void G__setup_memvardarkartcLcLodcLcLROICfg(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg));
   { darkart::od::ROICfg *p; p=(darkart::od::ROICfg*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"id_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->start_ns_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"start_ns_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end_ns_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"end_ns_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->label_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"label_vec=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::SliderCfg */
static void G__setup_memvardarkartcLcLodcLcLSliderCfg(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg));
   { darkart::od::SliderCfg *p; p=(darkart::od::SliderCfg*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"id_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->start_ns_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"start_ns_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end_ns_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"end_ns_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->width_ns_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"width_ns_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->label_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"label_vec=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::RunInfo */
static void G__setup_memvardarkartcLcLodcLcLRunInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo));
   { darkart::od::RunInfo *p; p=(darkart::od::RunInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->run_id)-(long)(p)),105,0,0,-1,-1,-1,1,"run_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->n_chassis)-(long)(p)),105,0,0,-1,-1,-1,1,"n_chassis=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->n_scopes)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"n_scopes=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chHCD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgR),G__defined_typename("vector<ChConfData>"),-1,1,"chHCD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LSVCfg)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg),-1,-1,1,"LSVCfg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WTCfg)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg),-1,-1,1,"WTCfg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->roicfg_lsv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg),-1,-1,1,"roicfg_lsv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->roicfg_wt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg),-1,-1,1,"roicfg_wt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slidercfg_lsv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg),-1,-1,1,"slidercfg_lsv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slidercfg_wt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg),-1,-1,1,"slidercfg_wt=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::RunInfo::ChConfData */
static void G__setup_memvardarkartcLcLodcLcLRunInfocLcLChConfData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData));
   { darkart::od::RunInfo::ChConfData *p; p=(darkart::od::RunInfo::ChConfData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->channel_type)-(long)(p)),105,0,0,-1,-1,-1,1,"channel_type=",0,"0: default, 1: LSV, 2: WT, -1: disabled LSV, -2: disabled WT");
   G__memvar_setup((void*)((long)(&p->sample_rate)-(long)(p)),100,0,0,-1,-1,-1,1,"sample_rate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->record_length)-(long)(p)),105,0,0,-1,-1,-1,1,"record_length=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reference_pos)-(long)(p)),100,0,0,-1,-1,-1,1,"reference_pos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->is_enabled)-(long)(p)),103,0,0,-1,-1,-1,1,"is_enabled=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertical_range)-(long)(p)),100,0,0,-1,-1,-1,1,"vertical_range=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertical_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"vertical_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zs_enabled)-(long)(p)),100,0,0,-1,-1,-1,1,"zs_enabled=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zs_threshold)-(long)(p)),100,0,0,-1,-1,-1,1,"zs_threshold=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zs_minwidth)-(long)(p)),100,0,0,-1,-1,-1,1,"zs_minwidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zs_pre)-(long)(p)),100,0,0,-1,-1,-1,1,"zs_pre=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zs_post)-(long)(p)),100,0,0,-1,-1,-1,1,"zs_post=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::RunInfo::DetectorCfg */
static void G__setup_memvardarkartcLcLodcLcLRunInfocLcLDetectorCfg(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg));
   { darkart::od::RunInfo::DetectorCfg *p; p=(darkart::od::RunInfo::DetectorCfg*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->same_configuration)-(long)(p)),103,0,0,-1,-1,-1,1,"same_configuration=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sample_rate_Hz)-(long)(p)),100,0,0,-1,-1,-1,1,"sample_rate_Hz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->record_length)-(long)(p)),105,0,0,-1,-1,-1,1,"record_length=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reference_pos)-(long)(p)),100,0,0,-1,-1,-1,1,"reference_pos=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::ChannelData */
static void G__setup_memvardarkartcLcLodcLcLChannelData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelData));
   { darkart::od::ChannelData *p; p=(darkart::od::ChannelData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->chassis)-(long)(p)),105,0,0,-1,-1,-1,1,"chassis=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->board)-(long)(p)),105,0,0,-1,-1,-1,1,"board=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channel)-(long)(p)),105,0,0,-1,-1,-1,1,"channel=",0,"specific to the board");
   G__memvar_setup((void*)((long)(&p->channel_id)-(long)(p)),105,0,0,-1,-1,-1,1,"channel_id=",0,"global ID");
   G__memvar_setup((void*)((long)(&p->channel_type)-(long)(p)),105,0,0,-1,-1,-1,1,"channel_type=",0,"0: default 1: LSV, 2: WT, -1: disabled LSV, -2: disable WT");
   G__memvar_setup((void*)((long)(&p->is_enabled)-(long)(p)),103,0,0,-1,-1,-1,1,"is_enabled=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->npulses)-(long)(p)),105,0,0,-1,-1,-1,1,"npulses=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pulses)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgR),G__defined_typename("pulses_t"),-1,1,"pulses=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::ChannelData::Pulse */
static void G__setup_memvardarkartcLcLodcLcLChannelDatacLcLPulse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse));
   { darkart::od::ChannelData::Pulse *p; p=(darkart::od::ChannelData::Pulse*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pulse_id)-(long)(p)),105,0,0,-1,-1,-1,1,"pulse_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->start_sample)-(long)(p)),105,0,0,-1,-1,-1,1,"start_sample=",0,"sample in the fADC");
   G__memvar_setup((void*)((long)(&p->start_ns)-(long)(p)),100,0,0,-1,-1,-1,1,"start_ns=",0,"basically start_sample/sample_rate_GHz-trigger_time_ns");
   G__memvar_setup((void*)((long)(&p->peak_sample)-(long)(p)),105,0,0,-1,-1,-1,1,"peak_sample=",0,"sample corresponding to the mimimum volt waveform (maximum spe waveform)");
   G__memvar_setup((void*)((long)(&p->peak_ns)-(long)(p)),100,0,0,-1,-1,-1,1,"peak_ns=",0,"time corresponding to peak_sample; mainly used for laser runs");
   G__memvar_setup((void*)((long)(&p->peak_amplitude)-(long)(p)),102,0,0,-1,-1,-1,1,"peak_amplitude=",0,"minimum amplitude in V (maximum in spe) of the waveform");
   G__memvar_setup((void*)((long)(&p->size_sample)-(long)(p)),105,0,0,-1,-1,-1,1,"size_sample=",0,"size of the waveform in sample ");
   G__memvar_setup((void*)((long)(&p->pedestal_mean)-(long)(p)),102,0,0,-1,-1,-1,1,"pedestal_mean=",0,"in V");
   G__memvar_setup((void*)((long)(&p->pedestal_rms)-(long)(p)),102,0,0,-1,-1,-1,1,"pedestal_rms=",0,"in V");
   G__memvar_setup((void*)((long)(&p->integral)-(long)(p)),102,0,0,-1,-1,-1,1,"integral=",0,"in V*s or spe");
   G__memvar_setup((void*)((long)(&p->offset)-(long)(p)),102,0,0,-1,-1,-1,1,"offset=",0,"average amplitude of the waveform (integral/length); used in pedestal calibration runs;Will not be changed in Saturation.");
   G__memvar_setup((void*)((long)(&p->saturation_correction)-(long)(p)),102,0,0,-1,-1,-1,1,"saturation_correction=",0,"same units of integral variable");
   G__memvar_setup((void*)((long)(&p->saturation_width)-(long)(p)),102,0,0,-1,-1,-1,1,"saturation_width=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->is_saturated)-(long)(p)),103,0,0,-1,-1,-1,1,"is_saturated=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> > */
static void G__setup_memvarvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   { vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> > *p; p=(vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* darkart::od::Cluster */
static void G__setup_memvardarkartcLcLodcLcLCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLCluster));
   { darkart::od::Cluster *p; p=(darkart::od::Cluster*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->cluster_id)-(long)(p)),105,0,0,-1,-1,-1,1,"cluster_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->start_sample)-(long)(p)),105,0,0,-1,-1,-1,1,"start_sample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end_sample)-(long)(p)),105,0,0,-1,-1,-1,1,"end_sample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->peak_sample)-(long)(p)),105,0,0,-1,-1,-1,1,"peak_sample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->max_multiplicity)-(long)(p)),105,0,0,-1,-1,-1,1,"max_multiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),102,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->height)-(long)(p)),102,0,0,-1,-1,-1,1,"height=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->start_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"start_ns=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"end_ns=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->peak_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"peak_ns=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->shape)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape),-1,-1,1,"shape=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ch_pulse_pairs)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),G__defined_typename("ChPulsePairVec"),-1,1,"ch_pulse_pairs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pmt_distr)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution),-1,-1,1,"pmt_distr=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::Cluster::Shape */
static void G__setup_memvardarkartcLcLodcLcLClustercLcLShape(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape));
   { darkart::od::Cluster::Shape *p; p=(darkart::od::Cluster::Shape*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->mean_time_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"mean_time_ns=",0,"first moment of the cluster pdf, weighted on amplitude");
   G__memvar_setup((void*)((long)(&p->sigma_mean_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"sigma_mean_ns=",0,"second moment with respect to the mean time ");
   G__memvar_setup((void*)((long)(&p->sigma_peak_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"sigma_peak_ns=",0,"second moment with respect to the peak time");
   G__memvar_setup((void*)((long)(&p->skewness)-(long)(p)),102,0,0,-1,-1,-1,1,"skewness=",0,"second moment ");
   G__memvar_setup((void*)((long)(&p->skewness_max)-(long)(p)),102,0,0,-1,-1,-1,1,"skewness_max=",0,"second moment calculated only on the main pulse without considering small pulses close to it ");
   G__memvar_setup((void*)((long)(&p->skewness_10to90)-(long)(p)),102,0,0,-1,-1,-1,1,"skewness_10to90=",0,"second moment calculated only between the time in witch the charge reaches 10% and the time in witch the charge reaches 90% ");
   G__memvar_setup((void*)((long)(&p->kurtosis)-(long)(p)),102,0,0,-1,-1,-1,1,"kurtosis=",0,"second moment ");
   G__memvar_setup((void*)((long)(&p->a10_time_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"a10_time_ns=",0,"time when the amplitude is 10% of max_amplitude");
   G__memvar_setup((void*)((long)(&p->a90_time_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"a90_time_ns=",0,"time when the amplitude is 90% of max_amplitude");
   G__memvar_setup((void*)((long)(&p->rise10_time_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"rise10_time_ns=",0,"a90_time - a10_time");
   G__memvar_setup((void*)((long)(&p->rise90_time_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"rise90_time_ns=",0,"a90_time - a10_time");
   G__memvar_setup((void*)((long)(&p->above_thr_time_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"above_thr_time_ns=",0,"time above threshold");
   G__memvar_setup((void*)((long)(&p->c10_time_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"c10_time_ns=",0,"time when the charge is 10% of the total charge");
   G__memvar_setup((void*)((long)(&p->c90_time_ns)-(long)(p)),102,0,0,-1,-1,-1,1,"c90_time_ns=",0,"time when the charge is 90% of the total charge");
   G__memvar_setup((void*)((long)(&p->f30)-(long)(p)),102,0,0,-1,-1,-1,1,"f30=",0,"fractional charge in first  50 ns");
   G__memvar_setup((void*)((long)(&p->f50)-(long)(p)),102,0,0,-1,-1,-1,1,"f50=",0,"fractional charge in first 100 ns");
   G__memvar_setup((void*)((long)(&p->f60)-(long)(p)),102,0,0,-1,-1,-1,1,"f60=",0,"fractional charge in first 200 ns");
   G__memvar_setup((void*)((long)(&p->tail50_to_total)-(long)(p)),102,0,0,-1,-1,-1,1,"tail50_to_total=",0,"fractional charge after the first 20 ns");
   G__memvar_setup((void*)((long)(&p->tail60_to_total)-(long)(p)),102,0,0,-1,-1,-1,1,"tail60_to_total=",0,"fractional charge after the first 20 ns");
   }
   G__tag_memvar_reset();
}


   /* darkart::od::Cluster::PMTDistribution */
static void G__setup_memvardarkartcLcLodcLcLClustercLcLPMTDistribution(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution));
   { darkart::od::Cluster::PMTDistribution *p; p=(darkart::od::Cluster::PMTDistribution*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->max_ch)-(long)(p)),105,0,0,-1,-1,-1,1,"max_ch=",0,"channel with maximum charge");
   G__memvar_setup((void*)((long)(&p->max_ch_fraction)-(long)(p)),102,0,0,-1,-1,-1,1,"max_ch_fraction=",0,"fraction of charge holded by the max_ch");
   G__memvar_setup((void*)((long)(&p->pmt_charge_mean)-(long)(p)),102,0,0,-1,-1,-1,1,"pmt_charge_mean=",0,"mean charge for each pmt within the cluster");
   G__memvar_setup((void*)((long)(&p->pmt_charge_variance)-(long)(p)),102,0,0,-1,-1,-1,1,"pmt_charge_variance=",0,"variance relative to the pmt_charge_mean");
   }
   G__tag_memvar_reset();
}


   /* darkart::od::ROI */
static void G__setup_memvardarkartcLcLodcLcLROI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROI));
   { darkart::od::ROI *p; p=(darkart::od::ROI*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"id_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"charge_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->max_multiplicity_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"max_multiplicity_vec=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::Slider */
static void G__setup_memvardarkartcLcLodcLcLSlider(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider));
   { darkart::od::Slider *p; p=(darkart::od::Slider*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"id_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"charge_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time_ns_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"time_ns_vec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->max_multiplicity_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"max_multiplicity_vec=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::TotalCharge */
static void G__setup_memvardarkartcLcLodcLcLTotalCharge(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge));
   { darkart::od::TotalCharge *p; p=(darkart::od::TotalCharge*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->lsv_total_charge)-(long)(p)),102,0,0,-1,-1,-1,1,"lsv_total_charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wt_total_charge)-(long)(p)),102,0,0,-1,-1,-1,1,"wt_total_charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chan_charge_vec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"chan_charge_vec=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* darkart::od::ODEventData */
static void G__setup_memvardarkartcLcLodcLcLODEventData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventData));
   { darkart::od::ODEventData *p; p=(darkart::od::ODEventData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->darkart_version)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_string),-1,-1,1,"darkart_version=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->event_info)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo),-1,-1,1,"event_info=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channel_data)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgR),G__defined_typename("vector<darkart::od::ChannelData>"),-1,1,"channel_data=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nclusters_lsv)-(long)(p)),105,0,0,-1,-1,-1,1,"nclusters_lsv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nclusters_wt)-(long)(p)),105,0,0,-1,-1,-1,1,"nclusters_wt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->clusters_lsv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgR),G__defined_typename("vector<darkart::od::Cluster>"),-1,1,"clusters_lsv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->clusters_wt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgR),G__defined_typename("vector<darkart::od::Cluster>"),-1,1,"clusters_wt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->roi_lsv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROI),-1,-1,1,"roi_lsv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->roi_wt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROI),-1,-1,1,"roi_wt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slider_lsv)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider),-1,-1,1,"slider_lsv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slider_wt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider),-1,-1,1,"slider_wt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->total_charge)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge),-1,-1,1,"total_charge=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
static void G__setup_memvarvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   { vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > *p; p=(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */
static void G__setup_memvarvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   { vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > *p; p=(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
static void G__setup_memvarvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   { vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > *p; p=(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > > */
static void G__setup_memvarvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   { vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > > *p; p=(vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSLADOD_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncdarkartcLcLodcLcLODEventInfo(void) {
   /* darkart::od::ODEventInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo));
   G__memfunc_setup("ODEventInfo",1057,G__SLADOD_Dict_645_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeGPSTimestamp",1596,G__SLADOD_Dict_645_0_2, 100, -1, -1, 0, 2, 1, 1, 8, 
"r - 'uint16_t' 10 - gps_pps h - 'uint32_t' 10 - gps_fine", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ODEventInfo", 1057, G__SLADOD_Dict_645_0_3, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo), -1, 0, 1, 1, 1, 0, "u 'darkart::od::ODEventInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ODEventInfo", 1183, G__SLADOD_Dict_645_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_645_0_5, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo), -1, 1, 1, 1, 1, 0, "u 'darkart::od::ODEventInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLROICfg(void) {
   /* darkart::od::ROICfg */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg));
   G__memfunc_setup("ROICfg",506,G__SLADOD_Dict_646_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ROICfg", 506, G__SLADOD_Dict_646_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg), -1, 0, 1, 1, 1, 0, "u 'darkart::od::ROICfg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ROICfg", 632, G__SLADOD_Dict_646_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_646_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg), -1, 1, 1, 1, 1, 0, "u 'darkart::od::ROICfg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLSliderCfg(void) {
   /* darkart::od::SliderCfg */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg));
   G__memfunc_setup("SliderCfg",883,G__SLADOD_Dict_651_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SliderCfg", 883, G__SLADOD_Dict_651_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg), -1, 0, 1, 1, 1, 0, "u 'darkart::od::SliderCfg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SliderCfg", 1009, G__SLADOD_Dict_651_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_651_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg), -1, 1, 1, 1, 1, 0, "u 'darkart::od::SliderCfg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLRunInfo(void) {
   /* darkart::od::RunInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo));
   G__memfunc_setup("RunInfo",705,G__SLADOD_Dict_652_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sampleTonsLSV",1307,G__SLADOD_Dict_652_0_2, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - samp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sampleTonsWT",1233,G__SLADOD_Dict_652_0_3, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - samp", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RunInfo", 705, G__SLADOD_Dict_652_0_4, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo), -1, 0, 1, 1, 1, 0, "u 'darkart::od::RunInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RunInfo", 831, G__SLADOD_Dict_652_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_652_0_6, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo), -1, 1, 1, 1, 1, 0, "u 'darkart::od::RunInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLRunInfocLcLChConfData(void) {
   /* darkart::od::RunInfo::ChConfData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData));
   G__memfunc_setup("ChConfData",939,G__SLADOD_Dict_653_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ChConfData", 939, G__SLADOD_Dict_653_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData), -1, 0, 1, 1, 1, 0, "u 'darkart::od::RunInfo::ChConfData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ChConfData", 1065, G__SLADOD_Dict_653_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_653_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData), -1, 1, 1, 1, 1, 0, "u 'darkart::od::RunInfo::ChConfData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLRunInfocLcLDetectorCfg(void) {
   /* darkart::od::RunInfo::DetectorCfg */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg));
   G__memfunc_setup("DetectorCfg",1098,G__SLADOD_Dict_654_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DetectorCfg", 1098, G__SLADOD_Dict_654_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg), -1, 0, 1, 1, 1, 0, "u 'darkart::od::RunInfo::DetectorCfg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DetectorCfg", 1224, G__SLADOD_Dict_654_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_654_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg), -1, 1, 1, 1, 1, 0, "u 'darkart::od::RunInfo::DetectorCfg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLChannelData(void) {
   /* darkart::od::ChannelData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelData));
   G__memfunc_setup("ChannelData",1075,G__SLADOD_Dict_681_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintVarNames",1322,G__SLADOD_Dict_681_0_2, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_string), -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const string (*)())(&darkart::od::ChannelData::PrintVarNames) ), 0);
   G__memfunc_setup("PrintVarContent",1553,G__SLADOD_Dict_681_0_3, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_string), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ChannelData", 1075, G__SLADOD_Dict_681_0_4, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelData), -1, 0, 1, 1, 1, 0, "u 'darkart::od::ChannelData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ChannelData", 1201, G__SLADOD_Dict_681_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_681_0_6, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelData), -1, 1, 1, 1, 1, 0, "u 'darkart::od::ChannelData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLChannelDatacLcLPulse(void) {
   /* darkart::od::ChannelData::Pulse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse));
   G__memfunc_setup("Pulse",521,G__SLADOD_Dict_686_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintVarNames",1322,G__SLADOD_Dict_686_0_2, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_string), -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const string (*)())(&darkart::od::ChannelData::Pulse::PrintVarNames) ), 0);
   G__memfunc_setup("PrintVarContent",1553,G__SLADOD_Dict_686_0_3, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_string), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Pulse", 521, G__SLADOD_Dict_686_0_4, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse), -1, 0, 1, 1, 1, 0, "u 'darkart::od::ChannelData::Pulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Pulse", 647, G__SLADOD_Dict_686_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_686_0_6, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse), -1, 1, 1, 1, 1, 0, "u 'darkart::od::ChannelData::Pulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR(void) {
   /* vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR));
   G__memfunc_setup("at",213,G__SLADOD_Dict_693_0_1, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample), G__defined_typename("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SLADOD_Dict_693_0_2, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample), G__defined_typename("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SLADOD_Dict_693_0_3, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SLADOD_Dict_693_0_4, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SLADOD_Dict_693_0_5, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiteratorgR), G__defined_typename("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SLADOD_Dict_693_0_6, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiteratorgR), G__defined_typename("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SLADOD_Dict_693_0_7, 107, -1, G__defined_typename("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SLADOD_Dict_693_0_8, 107, -1, G__defined_typename("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_693_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_693_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type' 0 - sz u 'darkart::od::SumWFSample' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SLADOD_Dict_693_0_11, 107, -1, G__defined_typename("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SLADOD_Dict_693_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_693_0_13, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample), G__defined_typename("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_693_0_14, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample), G__defined_typename("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >",6468,G__SLADOD_Dict_693_0_15, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >",6468,G__SLADOD_Dict_693_0_16, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type' 0 - n u 'darkart::od::SumWFSample' - 11 'darkart::od::SumWFSample()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >",6468,G__SLADOD_Dict_693_0_17, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >",6468,G__SLADOD_Dict_693_0_18, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator' 10 - first u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SLADOD_Dict_693_0_19, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SLADOD_Dict_693_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SLADOD_Dict_693_0_21, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SLADOD_Dict_693_0_22, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SLADOD_Dict_693_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'darkart::od::SumWFSample' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SLADOD_Dict_693_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_693_0_25, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' - 0 - position u 'darkart::od::SumWFSample' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_693_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' - 0 - position u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator' 10 - first "
"u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_693_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' - 0 - position k - 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::size_type' 0 - n "
"u 'darkart::od::SumWFSample' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SLADOD_Dict_693_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_693_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_693_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' - 0 - first u 'vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SLADOD_Dict_693_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >", 6594, G__SLADOD_Dict_693_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLCluster(void) {
   /* darkart::od::Cluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLCluster));
   G__memfunc_setup("Cluster",738,G__SLADOD_Dict_700_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Cluster", 738, G__SLADOD_Dict_700_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLCluster), -1, 0, 1, 1, 1, 0, "u 'darkart::od::Cluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Cluster", 864, G__SLADOD_Dict_700_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_700_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLCluster), -1, 1, 1, 1, 1, 0, "u 'darkart::od::Cluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLClustercLcLShape(void) {
   /* darkart::od::Cluster::Shape */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape));
   // automatic default constructor
   G__memfunc_setup("Shape", 497, G__SLADOD_Dict_705_0_1, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Shape", 497, G__SLADOD_Dict_705_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape), -1, 0, 1, 1, 1, 0, "u 'darkart::od::Cluster::Shape' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Shape", 623, G__SLADOD_Dict_705_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_705_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape), -1, 1, 1, 1, 1, 0, "u 'darkart::od::Cluster::Shape' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLClustercLcLPMTDistribution(void) {
   /* darkart::od::Cluster::PMTDistribution */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution));
   // automatic default constructor
   G__memfunc_setup("PMTDistribution", 1521, G__SLADOD_Dict_706_0_1, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PMTDistribution", 1521, G__SLADOD_Dict_706_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution), -1, 0, 1, 1, 1, 0, "u 'darkart::od::Cluster::PMTDistribution' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PMTDistribution", 1647, G__SLADOD_Dict_706_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_706_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution), -1, 1, 1, 1, 1, 0, "u 'darkart::od::Cluster::PMTDistribution' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLROI(void) {
   /* darkart::od::ROI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROI));
   G__memfunc_setup("ROI",234,G__SLADOD_Dict_707_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ROI", 234, G__SLADOD_Dict_707_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROI), -1, 0, 1, 1, 1, 0, "u 'darkart::od::ROI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ROI", 360, G__SLADOD_Dict_707_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_707_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLROI), -1, 1, 1, 1, 1, 0, "u 'darkart::od::ROI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLSlider(void) {
   /* darkart::od::Slider */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider));
   G__memfunc_setup("Slider",611,G__SLADOD_Dict_708_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Slider", 611, G__SLADOD_Dict_708_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider), -1, 0, 1, 1, 1, 0, "u 'darkart::od::Slider' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Slider", 737, G__SLADOD_Dict_708_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_708_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider), -1, 1, 1, 1, 1, 0, "u 'darkart::od::Slider' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLTotalCharge(void) {
   /* darkart::od::TotalCharge */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge));
   G__memfunc_setup("TotalCharge",1102,G__SLADOD_Dict_709_0_1, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TotalCharge", 1102, G__SLADOD_Dict_709_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge), -1, 0, 1, 1, 1, 0, "u 'darkart::od::TotalCharge' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TotalCharge", 1228, G__SLADOD_Dict_709_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_709_0_4, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge), -1, 1, 1, 1, 1, 0, "u 'darkart::od::TotalCharge' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdarkartcLcLodcLcLODEventData(void) {
   /* darkart::od::ODEventData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventData));
   G__memfunc_setup("clear",519,G__SLADOD_Dict_710_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("ODEventData", 1039, G__SLADOD_Dict_710_0_2, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventData), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ODEventData", 1039, G__SLADOD_Dict_710_0_3, (int) ('i'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventData), -1, 0, 1, 1, 1, 0, "u 'darkart::od::ODEventData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ODEventData", 1165, G__SLADOD_Dict_710_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SLADOD_Dict_710_0_5, (int) ('u'), G__get_linked_tagnum(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventData), -1, 1, 1, 1, 1, 0, "u 'darkart::od::ODEventData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR(void) {
   /* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__SLADOD_Dict_712_0_1, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SLADOD_Dict_712_0_2, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SLADOD_Dict_712_0_3, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SLADOD_Dict_712_0_4, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SLADOD_Dict_712_0_5, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SLADOD_Dict_712_0_6, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SLADOD_Dict_712_0_7, 107, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SLADOD_Dict_712_0_8, 107, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_712_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_712_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - sz u 'vector<int,allocator<int> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SLADOD_Dict_712_0_11, 107, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SLADOD_Dict_712_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_712_0_13, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_712_0_14, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__SLADOD_Dict_712_0_15, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__SLADOD_Dict_712_0_16, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n u 'vector<int,allocator<int> >' - 11 '(vector<int,allocator<int> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__SLADOD_Dict_712_0_17, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__SLADOD_Dict_712_0_18, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - first u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SLADOD_Dict_712_0_19, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SLADOD_Dict_712_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SLADOD_Dict_712_0_21, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SLADOD_Dict_712_0_22, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SLADOD_Dict_712_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SLADOD_Dict_712_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_712_0_25, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_712_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - first "
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_712_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n "
"u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SLADOD_Dict_712_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_712_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_712_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - first u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SLADOD_Dict_712_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >", 7302, G__SLADOD_Dict_712_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR(void) {
   /* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__SLADOD_Dict_716_0_1, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SLADOD_Dict_716_0_2, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SLADOD_Dict_716_0_3, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SLADOD_Dict_716_0_4, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SLADOD_Dict_716_0_5, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SLADOD_Dict_716_0_6, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SLADOD_Dict_716_0_7, 107, -1, G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SLADOD_Dict_716_0_8, 107, -1, G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_716_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_716_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - sz u 'vector<float,allocator<float> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SLADOD_Dict_716_0_11, 107, -1, G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SLADOD_Dict_716_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_716_0_13, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_716_0_14, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__SLADOD_Dict_716_0_15, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__SLADOD_Dict_716_0_16, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n u 'vector<float,allocator<float> >' - 11 '(vector<float,allocator<float> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__SLADOD_Dict_716_0_17, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__SLADOD_Dict_716_0_18, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - first u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SLADOD_Dict_716_0_19, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SLADOD_Dict_716_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SLADOD_Dict_716_0_21, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SLADOD_Dict_716_0_22, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SLADOD_Dict_716_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SLADOD_Dict_716_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_716_0_25, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position u 'vector<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_716_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - first "
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_716_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n "
"u 'vector<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SLADOD_Dict_716_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_716_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_716_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - first u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SLADOD_Dict_716_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >", 8114, G__SLADOD_Dict_716_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR(void) {
   /* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__SLADOD_Dict_720_0_1, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SLADOD_Dict_720_0_2, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SLADOD_Dict_720_0_3, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SLADOD_Dict_720_0_4, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SLADOD_Dict_720_0_5, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SLADOD_Dict_720_0_6, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SLADOD_Dict_720_0_7, 107, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SLADOD_Dict_720_0_8, 107, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_720_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_720_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - sz u 'vector<double,allocator<double> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SLADOD_Dict_720_0_11, 107, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SLADOD_Dict_720_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_720_0_13, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_720_0_14, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__SLADOD_Dict_720_0_15, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__SLADOD_Dict_720_0_16, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n u 'vector<double,allocator<double> >' - 11 '(vector<double,allocator<double> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__SLADOD_Dict_720_0_17, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__SLADOD_Dict_720_0_18, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - first u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SLADOD_Dict_720_0_19, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SLADOD_Dict_720_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SLADOD_Dict_720_0_21, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SLADOD_Dict_720_0_22, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SLADOD_Dict_720_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SLADOD_Dict_720_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_720_0_25, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_720_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - first "
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_720_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n "
"u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SLADOD_Dict_720_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_720_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_720_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - first u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SLADOD_Dict_720_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >", 8518, G__SLADOD_Dict_720_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR(void) {
   /* vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__SLADOD_Dict_724_0_1, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR), G__defined_typename("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SLADOD_Dict_724_0_2, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR), G__defined_typename("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SLADOD_Dict_724_0_3, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SLADOD_Dict_724_0_4, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SLADOD_Dict_724_0_5, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SLADOD_Dict_724_0_6, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SLADOD_Dict_724_0_7, 107, -1, G__defined_typename("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SLADOD_Dict_724_0_8, 107, -1, G__defined_typename("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_724_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SLADOD_Dict_724_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type' 0 - sz u 'vector<bool,allocator<bool> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SLADOD_Dict_724_0_11, 107, -1, G__defined_typename("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SLADOD_Dict_724_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_724_0_13, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR), G__defined_typename("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SLADOD_Dict_724_0_14, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR), G__defined_typename("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >",7564,G__SLADOD_Dict_724_0_15, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >",7564,G__SLADOD_Dict_724_0_16, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type' 0 - n u 'vector<bool,allocator<bool> >' - 11 '(vector<bool,allocator<bool> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >",7564,G__SLADOD_Dict_724_0_17, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >",7564,G__SLADOD_Dict_724_0_18, 105, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator' 10 - first u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SLADOD_Dict_724_0_19, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SLADOD_Dict_724_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SLADOD_Dict_724_0_21, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SLADOD_Dict_724_0_22, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SLADOD_Dict_724_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<bool,allocator<bool> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SLADOD_Dict_724_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_724_0_25, 117, G__get_linked_tagnum(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' - 0 - position u 'vector<bool,allocator<bool> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_724_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' - 0 - position u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator' 10 - first "
"u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SLADOD_Dict_724_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' - 0 - position k - 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::size_type' 0 - n "
"u 'vector<bool,allocator<bool> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SLADOD_Dict_724_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_724_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SLADOD_Dict_724_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' - 0 - first u 'vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SLADOD_Dict_724_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >", 7690, G__SLADOD_Dict_724_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSLADOD_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSLADOD_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSLADOD_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkart = { "darkart" , 110 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLod = { "darkart::od" , 110 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo = { "darkart::od::ODEventInfo" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLROICfg = { "darkart::od::ROICfg" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg = { "darkart::od::SliderCfg" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo = { "darkart::od::RunInfo" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData = { "darkart::od::RunInfo::ChConfData" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg = { "darkart::od::RunInfo::DetectorCfg" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgR = { "vector<darkart::od::RunInfo::ChConfData,allocator<darkart::od::RunInfo::ChConfData> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<darkart::od::RunInfo::ChConfData,allocator<darkart::od::RunInfo::ChConfData> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLChannelData = { "darkart::od::ChannelData" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgR = { "vector<darkart::od::ChannelData,allocator<darkart::od::ChannelData> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<darkart::od::ChannelData,allocator<darkart::od::ChannelData> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse = { "darkart::od::ChannelData::Pulse" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgR = { "vector<darkart::od::ChannelData::Pulse,allocator<darkart::od::ChannelData::Pulse> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<darkart::od::ChannelData::Pulse,allocator<darkart::od::ChannelData::Pulse> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample = { "darkart::od::SumWFSample" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR = { "vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiterator = { "vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR = { "vector<pair<int,int>,allocator<pair<int,int> > >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<int,int>,allocator<pair<int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLCluster = { "darkart::od::Cluster" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgR = { "vector<darkart::od::Cluster,allocator<darkart::od::Cluster> >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<darkart::od::Cluster,allocator<darkart::od::Cluster> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape = { "darkart::od::Cluster::Shape" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution = { "darkart::od::Cluster::PMTDistribution" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLROI = { "darkart::od::ROI" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLSlider = { "darkart::od::Slider" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge = { "darkart::od::TotalCharge" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_darkartcLcLodcLcLODEventData = { "darkart::od::ODEventData" , 115 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR = { "vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR = { "vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSLADOD_Dict() {
  G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_string.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SLADOD_DictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__SLADOD_DictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__SLADOD_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__SLADOD_DictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__SLADOD_DictLN_darkart.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLod.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLROICfg.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLChannelData.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiterator.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLCluster.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLROI.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLSlider.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge.tagnum = -1 ;
  G__SLADOD_DictLN_darkartcLcLodcLcLODEventData.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSLADOD_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_string);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkart);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventInfo),sizeof(darkart::od::ODEventInfo),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLODEventInfo,G__setup_memfuncdarkartcLcLodcLcLODEventInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLROICfg),sizeof(darkart::od::ROICfg),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLROICfg,G__setup_memfuncdarkartcLcLodcLcLROICfg);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLSliderCfg),sizeof(darkart::od::SliderCfg),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLSliderCfg,G__setup_memfuncdarkartcLcLodcLcLSliderCfg);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfo),sizeof(darkart::od::RunInfo),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLRunInfo,G__setup_memfuncdarkartcLcLodcLcLRunInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLChConfData),sizeof(darkart::od::RunInfo::ChConfData),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLRunInfocLcLChConfData,G__setup_memfuncdarkartcLcLodcLcLRunInfocLcLChConfData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLRunInfocLcLDetectorCfg),sizeof(darkart::od::RunInfo::DetectorCfg),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLRunInfocLcLDetectorCfg,G__setup_memfuncdarkartcLcLodcLcLRunInfocLcLDetectorCfg);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLRunInfocLcLChConfDatacOallocatorlEdarkartcLcLodcLcLRunInfocLcLChConfDatagRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelData),sizeof(darkart::od::ChannelData),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLChannelData,G__setup_memfuncdarkartcLcLodcLcLChannelData);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacOallocatorlEdarkartcLcLodcLcLChannelDatagRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLChannelDatacLcLPulse),sizeof(darkart::od::ChannelData::Pulse),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLChannelDatacLcLPulse,G__setup_memfuncdarkartcLcLodcLcLChannelDatacLcLPulse);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLChannelDatacLcLPulsecOallocatorlEdarkartcLcLodcLcLChannelDatacLcLPulsegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLSumWFSample);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR),sizeof(vector<darkart::od::SumWFSample,allocator<darkart::od::SumWFSample> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR,G__setup_memfuncvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLSumWFSamplecOallocatorlEdarkartcLcLodcLcLSumWFSamplegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLCluster),sizeof(darkart::od::Cluster),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLCluster,G__setup_memfuncdarkartcLcLodcLcLCluster);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEdarkartcLcLodcLcLClustercOallocatorlEdarkartcLcLodcLcLClustergRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLShape),sizeof(darkart::od::Cluster::Shape),-1,262144,(char*)NULL,G__setup_memvardarkartcLcLodcLcLClustercLcLShape,G__setup_memfuncdarkartcLcLodcLcLClustercLcLShape);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLClustercLcLPMTDistribution),sizeof(darkart::od::Cluster::PMTDistribution),-1,262144,(char*)NULL,G__setup_memvardarkartcLcLodcLcLClustercLcLPMTDistribution,G__setup_memfuncdarkartcLcLodcLcLClustercLcLPMTDistribution);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLROI),sizeof(darkart::od::ROI),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLROI,G__setup_memfuncdarkartcLcLodcLcLROI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLSlider),sizeof(darkart::od::Slider),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLSlider,G__setup_memfuncdarkartcLcLodcLcLSlider);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLTotalCharge),sizeof(darkart::od::TotalCharge),-1,262400,(char*)NULL,G__setup_memvardarkartcLcLodcLcLTotalCharge,G__setup_memfuncdarkartcLcLodcLcLTotalCharge);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_darkartcLcLodcLcLODEventData),sizeof(darkart::od::ODEventData),-1,262144,(char*)NULL,G__setup_memvardarkartcLcLodcLcLODEventData,G__setup_memfuncdarkartcLcLodcLcLODEventData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),sizeof(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),sizeof(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),sizeof(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),sizeof(vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SLADOD_DictLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupSLADOD_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupSLADOD_Dict()");
  G__set_cpp_environmentSLADOD_Dict();
  G__cpp_setup_tagtableSLADOD_Dict();

  G__cpp_setup_inheritanceSLADOD_Dict();

  G__cpp_setup_typetableSLADOD_Dict();

  G__cpp_setup_memvarSLADOD_Dict();

  G__cpp_setup_memfuncSLADOD_Dict();
  G__cpp_setup_globalSLADOD_Dict();
  G__cpp_setup_funcSLADOD_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSLADOD_Dict();
  return;
}
class G__cpp_setup_initSLADOD_Dict {
  public:
    G__cpp_setup_initSLADOD_Dict() { G__add_setup_func("SLADOD_Dict",(G__incsetup)(&G__cpp_setupSLADOD_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSLADOD_Dict() { G__remove_setup_func("SLADOD_Dict"); }
};
G__cpp_setup_initSLADOD_Dict G__cpp_setup_initializerSLADOD_Dict;

