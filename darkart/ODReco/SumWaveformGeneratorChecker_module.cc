////////////////////////////////////////////////////////////////////////
// Class:       SumWaveformGeneratorChecker
// Module Type: analyzer
// File:        SumWaveformGeneratorChecker_module.cc
//
// Generated at Wed Feb  4 04:59:36 2015 by Shawn Westerdale using artmod
// from cetpkgsupport v1_07_00.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <iostream>

#include "darkart/ODProducts/SumWF.hh"

namespace darkart {
  namespace od {
    class SumWaveformGeneratorChecker;
  }
}

class darkart::od::SumWaveformGeneratorChecker : public art::EDAnalyzer {
public:
  explicit SumWaveformGeneratorChecker(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  SumWaveformGeneratorChecker(SumWaveformGeneratorChecker const &) = delete;
  SumWaveformGeneratorChecker(SumWaveformGeneratorChecker &&) = delete;
  SumWaveformGeneratorChecker & operator = (SumWaveformGeneratorChecker const &) = delete;
  SumWaveformGeneratorChecker & operator = (SumWaveformGeneratorChecker &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;


private:

  std::string _input_lsv_wf;
  std::string _input_wt_wf;

};


darkart::od::SumWaveformGeneratorChecker::SumWaveformGeneratorChecker(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p) 
  , _input_lsv_wf(p.get<std::string>("input_lsv_wf"))
  , _input_wt_wf(p.get<std::string>("input_wt_wf"))
 // More initializers here.
{
}

void darkart::od::SumWaveformGeneratorChecker::analyze(art::Event const & e)
{
  // This section is checking the BaselineCorrector submodule
  auto const & lsv_wf = e.getValidHandle<darkart::od::SumWF>(_input_lsv_wf);
  auto const & wt_wf = e.getValidHandle<darkart::od::SumWF>(_input_wt_wf);

  bool zeroRegion = false;
  int nZeros = 0;
  if(lsv_wf->size() > 100){
    for(int samp = 0; samp < int(lsv_wf->size()); samp++){
      double amplitude = lsv_wf->at(samp).amplitude;
      //LOG_INFO("SumWaveformGeneratorChecker") << "LSV)  " << samp << " = " << lsv_wf->at(samp).sample_ns << " : " << lsv_wf->at(samp).amplitude << "\n";
      if(!zeroRegion && amplitude < 100 && amplitude > -100){
	zeroRegion = true;
	nZeros++;
      }
      if(amplitude > 100)
	zeroRegion = false;
      std::cout << "lsv) " << samp << " = " << lsv_wf->at(samp).sample_ns << " : " << lsv_wf->at(samp).amplitude << "\n";
    }
  }

  std::cout << "nZeros = " << nZeros << std::endl;

  if(wt_wf->size() > 100){
    for(int samp = 0; samp < 100; samp++){
      LOG_INFO("SumWaveformGeneratorChecker") << "WT)  " << samp << " = " << wt_wf->at(samp).sample_ns << " : " << wt_wf->at(samp).amplitude << "\n";
    }
  }    
  
}

DEFINE_ART_MODULE(darkart::od::SumWaveformGeneratorChecker)
