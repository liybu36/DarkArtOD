////////////////////////////////////////////////////////////////////////
// Class:       ODReaderChecker
// Module Type: analyzer
// File:        ODReaderChecker_module.cc
//
// Generated at Tue Dec 16 09:31:33 2014 by Alden Fan using artmod
// from cetpkgsupport v1_07_00.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <iostream>

#include "darkart/ODProducts/RunInfo.hh"
#include "darkart/ODProducts/ODEventInfo.hh"
#include "darkart/ODProducts/ChannelData.hh"

namespace darkart {
  namespace od {
    class ODReaderChecker;
  }
}

class darkart::od::ODReaderChecker : public art::EDAnalyzer {
public:
  explicit ODReaderChecker(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  ODReaderChecker(ODReaderChecker const &) = delete;
  ODReaderChecker(ODReaderChecker &&) = delete;
  ODReaderChecker & operator = (ODReaderChecker const &) = delete;
  ODReaderChecker & operator = (ODReaderChecker &&) = delete;

  // Required functions.
  void beginRun(art::Run const& r) override;
  void analyze(art::Event const & e) override;

private:

  art::InputTag crd_tag_;

};


darkart::od::ODReaderChecker::ODReaderChecker(fhicl::ParameterSet const & p)
  : EDAnalyzer(p)
  , crd_tag_(p.get<std::string>("crd_tag"))
{}


void darkart::od::ODReaderChecker::beginRun(art::Run const& r)
{
  art::Handle<darkart::od::RunInfo> riHandle; 
  r.getByLabel("ODReader", riHandle);
  //auto const& ri = e.getValidHandle<darkart::od::RunInfo>("ODReader");
  std::cout << "testing art::Run "<<riHandle->run_id << std::endl;
  LOG_INFO("ODReaderChecker") <<"run_id: "<< riHandle->run_id <<" n_chassis: "<<riHandle->n_chassis <<" n_scopes size "<<riHandle->n_scopes.size()<<" chHCD size "<<riHandle->chHCD.size()<<std::endl;
  for(unsigned int i=0;i<riHandle->n_scopes.size();i++) LOG_INFO("ODReaderChecker") <<" n_scopes "<<riHandle->n_scopes[i]<<" "<<std::endl;
  for(unsigned int i=0;i<riHandle->chHCD.size();i++) LOG_INFO("ODReaderChecker") <<" chHCD \n\tsample_rate"<<riHandle->chHCD[i].sample_rate
                                                                  <<" \n\trecord_length"<<riHandle->chHCD[i].record_length
                                                                  <<" \n\treference_pos"<<riHandle->chHCD[i].reference_pos
                                                                  <<" \n\tis_enabled"<<riHandle->chHCD[i].is_enabled
                                                                  <<" \n\tvertical_range"<<riHandle->chHCD[i].vertical_range
                                                                  <<" \n\tvertical_offset"<<riHandle->chHCD[i].vertical_offset
                                                                  <<" \n\tzs_enabled"<<riHandle->chHCD[i].zs_enabled
                                                                  <<" \n\tzs_threshold"<<riHandle->chHCD[i].zs_threshold
                                                                  <<" \n\tzs_minwidth"<<riHandle->chHCD[i].zs_minwidth
                                                                  <<" \n\tzs_pre"<<riHandle->chHCD[i].zs_pre
                                                                  <<" \n\tzs_post"<<riHandle->chHCD[i].zs_post
                                                                  <<std::endl;
  
}

void darkart::od::ODReaderChecker::analyze(art::Event const & e)
{

  auto const& ei = e.getValidHandle<darkart::od::ODEventInfo>("ODReader");
  LOG_INFO("ODReaderChecker") <<"\t run_id: "<< ei->run_id 
                              <<"\n\t subrun_id: "<<ei->subrun_id 
                              <<"\n\t event_id: "<<ei->event_id
                              <<"\n\t gps_coarse: "<<ei->gps_coarse
                              <<"\n\t gps_fine: "<<ei->gps_fine
                              <<"\n\t gps_pps: "<<ei->gps_pps
                              <<"\n\t gps_timestamp_sec: "<<ei->gps_timestamp_sec
                              <<"\n\t dt_usec: "<<ei->dt_usec
                              <<"\n\t trigger_type: "<<ei->trigger_type
                              <<"\n\t bad_time_alignment: "<<ei->bad_time_alignment
                              <<std::endl;

  auto const& crdVec = e.getValidHandle<darkart::od::ChannelDataVec>(crd_tag_);

  for (auto const& crd : *crdVec) {
    LOG_INFO("ODReaderChecker") <<"\t\t chassis: " <<crd.chassis
                                <<"\n\t\t board: " <<crd.board
                                <<"\n\t\t channel: " <<crd.channel
                                <<"\n\t\t channel_id: " <<crd.channel_id 
                                <<"\n\t\t npulses: " <<crd.npulses
                                <<"\n\t\t pulses.size(): " <<crd.pulses.size()
                                <<  std::endl;
    for(unsigned int p=0;p<crd.pulses.size();p++){
      LOG_INFO("ODReaderChecker") <<"\t\t\t pulse_id: " <<crd.pulses[p].pulse_id
                                <<"\n\t\t\t start_sample: " <<crd.pulses[p].start_sample
                                <<"\n\t\t\t start_ns: " <<crd.pulses[p].start_ns
                                <<"\n\t\t\t peak_sample: " <<crd.pulses[p].peak_sample
                                <<"\n\t\t\t peak_ns: " <<crd.pulses[p].peak_ns
                                <<"\n\t\t\t peak_amplitude: " <<crd.pulses[p].peak_amplitude
                                <<"\n\t\t\t size_sample: " <<crd.pulses[p].size_sample
                                <<"\n\t\t\t pedestal_mean: " <<crd.pulses[p].pedestal_mean
                                <<"\n\t\t\t pedestal_rms: " <<crd.pulses[p].pedestal_rms
                                <<"\n\t\t\t integral: " <<crd.pulses[p].integral
                                <<"\n\t\t\t offset: " <<crd.pulses[p].offset
                                <<"\n\t\t\t saturation_correction: " <<crd.pulses[p].saturation_correction
                                <<"\n\t\t\t is_saturated: " <<crd.pulses[p].is_saturated
                                <<  std::endl; 
    }
  }
}

DEFINE_ART_MODULE(darkart::od::ODReaderChecker)
