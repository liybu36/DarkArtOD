////////////////////////////////////////////////////////////////////////
// Class:       PulseCorrectorChecker
// Module Type: analyzer
// File:        PulseCorrectorChecker_module.cc
//
// Generated at Wed Feb  4 04:59:36 2015 by Shawn Westerdale using artmod
// from cetpkgsupport v1_07_00.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "darkart/ODProducts/ChannelData.hh"
#include "darkart/ODProducts/ChannelWFs.hh"

namespace darkart {
  namespace od {
    class PulseCorrectorChecker;
  }
}

class darkart::od::PulseCorrectorChecker : public art::EDAnalyzer {
public:
  explicit PulseCorrectorChecker(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  PulseCorrectorChecker(PulseCorrectorChecker const &) = delete;
  PulseCorrectorChecker(PulseCorrectorChecker &&) = delete;
  PulseCorrectorChecker & operator = (PulseCorrectorChecker const &) = delete;
  PulseCorrectorChecker & operator = (PulseCorrectorChecker &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;


private:

  std::string _inptag;

};


darkart::od::PulseCorrectorChecker::PulseCorrectorChecker(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p) 
  , _inptag(p.get<std::string>("inptag"))
 // More initializers here.
{
}

void darkart::od::PulseCorrectorChecker::analyze(art::Event const & e)
{
  // This section is checking the BaselineCorrector submodule
  auto const & channel_data_vec = e.getValidHandle<darkart::od::ChannelDataVec>(_inptag);
  auto const & channel_wfs_vec = e.getValidHandle<darkart::od::ChannelWFsVec>(_inptag);

  const unsigned psize = channel_data_vec->at(0).pulses.size(); // # of pulses in zeroth channel
  if (psize>0){
    const float inte = channel_data_vec->at(0).pulses.at(0).integral;
    const float mean = channel_data_vec->at(0).pulses.at(0).pedestal_mean;
    const float num_wf_samps = channel_wfs_vec->at(0).pulse_wfs.at(0).data.size();

    LOG_INFO("PulseCorrectorChecker") << "CH: " << channel_data_vec->at(0).channel_id << "\tpulse: " << channel_data_vec->at(0).pulses.at(0).pulse_id << "\tpedestal Mean = " << mean << "\tintegral = " << inte << "\tnum_wf_samps = " << num_wf_samps << "\tstart_sample = " << channel_data_vec->at(0).pulses.at(0).start_sample;
  }
}

DEFINE_ART_MODULE(darkart::od::PulseCorrectorChecker)
